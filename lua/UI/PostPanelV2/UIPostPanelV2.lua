---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2019/3/19 15:57
---


require("UI.UIBasePanel")
require("UI.PostPanelV2.item.UIPostLeftTabItemV2")
require("UI.PostPanelV2.item.UIPostRightBannerItemV2")
require("UI.PostPanelV2.item.UIPostRightButtonItemV2")
require("UI.PostPanelV2.item.UIPostRightItemV2")
require("UI.PostPanelV2.item.UIPostRightTextDescriptionItemV2")

---@class UIPostPanelV2 : UIBasePanel
UIPostPanelV2 = class("UIPostPanelV2", UIBasePanel);
UIPostPanelV2.__index = UIPostPanelV2;
---@type UIPostPanelV2View
UIPostPanelV2.mView = nil;
UIPostPanelV2.mPath_TabItem = "Post/PostTopTabItemV2.prefab"
UIPostPanelV2.mPath_ListItem = "Post/PostLeftTabItemV2.prefab"
UIPostPanelV2.PANEL_TYPE = {}
PANEL_TYPE = {
    PANEL_GAME = 1,
    PANEL_ACTIVITY = 2,
}
UIPostPanelV2.mCurrentPanelType = PANEL_TYPE.PANEL_ACTIVITY;--默认为活动公告
UIPostPanelV2.mPostPanelDataList = nil;
UIPostPanelV2.mPostListItemList = nil;
UIPostPanelV2.mPostTopTabDict = nil;
UIPostPanelV2.mPostBtnDict = nil;--key btnGameobj value btnScript
UIPostPanelV2.mUniView =nil;
UIPostPanelV2.__Opened = false;
UIPostPanelV2.readPostList = nil
UIPostPanelV2.callback = nil
UIPostPanelV2.gameDataCount = 0
UIPostPanelV2.activityDataCount = 0

function UIPostPanelV2:ctor()
    UIPostPanelV2.super.ctor(self);

end

function UIPostPanelV2.Open(callback)
    if not UIPostPanelV2.__Opened and not PostInfoConfig.PostIsNull then
        UIPostPanelV2.callback = callback
        UIManager.OpenUI(UIDef.UIPostPanelV2)
        
    else
        if callback then callback() end
    end
    
end

function UIPostPanelV2.Close()
    self = UIPostPanelV2
    UIPostPanelV2.__Opened = false;
    PostInfoConfig.RecordReadPostList()
    
    UIManager.CloseUIByCallback(UIDef.UIPostPanelV2, function ()
        if UIPostPanelV2.callback then UIPostPanelV2.callback() end
    end)
    
end

function UIPostPanelV2.Init(root, data)

    UIPostPanelV2.super.SetRoot(UIPostPanelV2, root);

    self = UIPostPanelV2;

    self.mData = data;
    self.mIsPop = true

    self.mView = UIPostPanelV2View;
    self.mView:InitCtrl(root);
    
end

function UIPostPanelV2.OnInit()
    gfwarning("PostPanel init!")
    UIPostPanelV2.__Opened = true
    -- PostInfoConfig.ParseReadPost()
    UIPostPanelV2.RegisterListener()
    UIPostPanelV2.mPostPanelDataList = PostInfoConfig.PostDataList
    UIPostPanelV2.InitPanels()

    UIPostPanelV2.mPostTopTabDict = Dictionary:New()
    if UIPostPanelV2.activityDataCount > 0 then
        UIPostPanelV2.InitTab(PANEL_TYPE.PANEL_ACTIVITY)
    end

    if UIPostPanelV2.gameDataCount > 0 then
        UIPostPanelV2.InitTab(PANEL_TYPE.PANEL_GAME)
    end

    if UIPostPanelV2.mCurrentPanelType == PANEL_TYPE.PANEL_ACTIVITY and UIPostPanelV2.activityDataCount == 0 then
        UIPostPanelV2.OnGamePostBtnClicked()
    end

    UIPostPanelV2.CheckRedPoint()
end

function UIPostPanelV2.OnShow()
    self = UIPostPanelV2;

    -- UIPostPanelV2.mUIRoot.transform:SetAsLastSibling()
end

function UIPostPanelV2.OnRelease()
    self = UIPostPanelV2;
    UIPostPanelV2.mPostPanelDataList = nil;
    UIPostPanelV2.mPostListItemList = nil;
    UIPostPanelV2.mPostTopTabDict = nil;
    UIPostPanelV2.mPostBtnDict = nil;
    UIPostPanelV2.mCurrentPanelType = PANEL_TYPE.PANEL_ACTIVITY;
    UIPostPanelV2.activityDataCount = 0;
    UIPostPanelV2.gameDataCount = 0;

    PostInfoConfig.DestroyPostTexture()
end

function UIPostPanelV2.RegisterListener()
    UIUtils.GetButtonListener(UIPostPanelV2.mView.mBtn_Close.gameObject).onClick = UIPostPanelV2.OnReturnClicked
    UIUtils.GetButtonListener(UIPostPanelV2.mView.mBtn_Bg_Close.gameObject).onClick = UIPostPanelV2.OnReturnClicked

    UIPostPanelV2.mView.mScrRect_PostList.onValueChanged:AddListener(self.CheckScroll);
end


--Input a Button Component and it's Item
function UIPostPanelV2.RegisterBtnListener(btnItem,btnCompo)
    if UIPostPanelV2.mPostBtnDict == nil then
        UIPostPanelV2.mPostBtnDict = Dictionary:New()
    end

    local btnGameobj = btnCompo.gameObject
    if not UIPostPanelV2.mPostBtnDict:ContainsKey(btnGameobj) then
        UIPostPanelV2.mPostBtnDict:Add(btnGameobj,btnItem)
        UIUtils.GetButtonListener(btnGameobj).onClick = UIPostPanelV2.OnLabelBtnClicked
    end

end

function UIPostPanelV2.InitPanels()
    if UIPostPanelV2.mPostPanelDataList==nil then
        gferror("PostData is null!")
        return;
    end
    self = UIPostPanelV2
    local timeStamp = CGameTime:GetTimestamp()
    local listItemPrefab = UIUtils.GetGizmosPrefab(UIPostPanelV2.mPath_ListItem,self);
    UIPostPanelV2.mPostListItemList = List:New()
    for i=0,UIPostPanelV2.mPostPanelDataList.Count - 1 do
        local postData = UIPostPanelV2.mPostPanelDataList[i]
        if postData.type == PANEL_TYPE.PANEL_ACTIVITY then
            UIPostPanelV2.activityDataCount = UIPostPanelV2.activityDataCount + 1
        else
            UIPostPanelV2.gameDataCount = UIPostPanelV2.gameDataCount + 1
        end
        if postData.type == UIPostPanelV2.mCurrentPanelType and postData.startTime<timeStamp and postData.endTime>timeStamp then
            local listItemInst = instantiate(listItemPrefab,UIPostPanelV2.mView.mTrans_PostList.transform)
            ---@type UIPostLeftTabItemV2
            local listItem = UIPostLeftTabItemV2.New()
            listItem:InitCtrl(listItemInst.transform)
            listItem:SetData(postData)
            UIUtils.GetButtonListener(listItem.mBtn.gameObject).onClick = UIPostPanelV2.OnListClicked
            UIPostPanelV2.mPostListItemList:Add(listItem)
        end
    end

    UIPostPanelV2.ActiveDefaultList()
end

function UIPostPanelV2.InitTab(type)
    local tabPrefab = UIUtils.GetGizmosPrefab(UIPostPanelV2.mPath_TabItem,self);
    local tabGameObj = instantiate(tabPrefab, UIPostPanelV2.mView.mTrans_TabList.transform)
    ---@type UIPostTopTabItemV2
    local tabIns = UIPostTopTabItemV2.New()
    tabIns:InitCtrl(tabGameObj.transform)
    tabIns:SetData(type)
    if self.mCurrentPanelType == type then
        UIUtils.SetInteractive(tabIns.mUIRoot, false)
    else
        UIUtils.SetInteractive(tabIns.mUIRoot, true)
    end
    if type == PANEL_TYPE.PANEL_ACTIVITY then
        UIUtils.GetButtonListener(tabIns.mBtn.gameObject).onClick = UIPostPanelV2.OnActivityBtnClicked
    else
        UIUtils.GetButtonListener(tabIns.mBtn.gameObject).onClick = UIPostPanelV2.OnGamePostBtnClicked
    end
    UIPostPanelV2.mPostTopTabDict:Add(type, tabIns)
end

function UIPostPanelV2.CheckScroll(pos)
    if(pos.y > 0) then
        setactive(UIPostPanelV2.mView.mScrBar_PostListScrBar.gameObject,true);
    else
        setactive(UIPostPanelV2.mView.mScrBar_PostListScrBar.gameObject,false);
    end
end

function UIPostPanelV2.ReleasePanels()
    if UIPostPanelV2.mPostListItemList~=nil then
        for i=1,UIPostPanelV2.mPostListItemList:Count() do
            UIPostPanelV2.mPostListItemList[i]:OnRelease()
        end
        UIPostPanelV2.mPostListItemList = nil;
    end


end

function UIPostPanelV2.SetUniViewAddress(address)
    --UIPostPanelV2.mView.mUniWebView_UniView.ReferenceRectTransform = UIPostPanelV2.mView.mTrans_ContentPanel
    print ("设置uniView地址！： "..address)
	
    MessageSys:SendMessage(1007,address);
    --CS.LuaUIUtils.SetUniWebViewAddress(UIPostPanelV2.mView.mUniWebView_UniView,address)
    --UIPostPanelV2.mView.mUniWebView_UniView.Show()
end

function UIPostPanelV2.ActiveDefaultList()
    for i=1,UIPostPanelV2.mPostListItemList:Count() do
        if UIPostPanelV2.mPostListItemList[i].mType == UIPostPanelV2.mCurrentPanelType then
            UIPostPanelV2.OnListClicked(UIPostPanelV2.mPostListItemList[i].mBtn.gameObject)
            return
        end
    end
end

function UIPostPanelV2.OnReturnClicked(gameobj)
    UIPostPanelV2.Close()
    -- UIUniTopBarPanel:Show(true)
    --UICommandCenterPanel:SetMaskEnable(true)
    --NetCmdCheckInData:SendGetDailyCheckInCmd(self.SendCheckInCallback);
end

function UIPostPanelV2.OnActivityBtnClicked(gameobj)
    gfwarning("Activity!")
    UIPostPanelV2.mCurrentPanelType = PANEL_TYPE.PANEL_ACTIVITY
    if UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_ACTIVITY] then
        UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_ACTIVITY].mBtn.interactable = false;
    end
    if UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_GAME] then
        UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_GAME].mBtn.interactable = true;
    end
    MessageSys:SendMessage(CS.GF2.Message.UIEvent.UniViewActivityChange,"false");
    UIPostPanelV2.ReleasePanels()
    UIPostPanelV2.InitPanels()
    UIPostPanelV2.mView.mVLayout_Content.childAlignment = 4
    UIPostPanelV2.mView.mScrRect_ContentList.verticalNormalizedPosition = 1
end

function UIPostPanelV2.OnGamePostBtnClicked(gameobj)
    gfwarning("Post!")
    UIPostPanelV2.mCurrentPanelType = PANEL_TYPE.PANEL_GAME
    if UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_GAME] then
        UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_GAME].mBtn.interactable = false;
    end
    if UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_ACTIVITY] then
        UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_ACTIVITY].mBtn.interactable = true;
    end
    MessageSys:SendMessage(CS.GF2.Message.UIEvent.UniViewActivityChange,"true");
    UIPostPanelV2.ReleasePanels()
    UIPostPanelV2.InitPanels()
    UIPostPanelV2.mView.mVLayout_Content.childAlignment = 4
    UIPostPanelV2.mView.mScrRect_ContentList.verticalNormalizedPosition = 1
end

function UIPostPanelV2.OnListClicked(gameobj)
    for i = 1,UIPostPanelV2.mPostListItemList:Count() do
        ---@type UIPostLeftTabItemV2
        local postListItem = UIPostPanelV2.mPostListItemList[i]

        if gameobj==postListItem.mBtn.gameObject then
            postListItem:OnClicked()
        else
            postListItem:OnCancel()
        end
    end
    UIPostPanelV2.CheckRedPoint()
end

function UIPostPanelV2.CheckRedPoint()
    if UIPostPanelV2.mPostTopTabDict == nil or not UIPostPanelV2.mPostTopTabDict:ContainsKey(UIPostPanelV2.mCurrentPanelType) then
        return
    end
    local activityHasNew = false
    local gameHasNew = false
    for i=0,UIPostPanelV2.mPostPanelDataList.Count - 1 do
        local postData = UIPostPanelV2.mPostPanelDataList[i]
        local isNew = PostInfoConfig.CheckPostIsNew(postData.type, postData.id)
        if isNew then
            if postData.type == PANEL_TYPE.PANEL_ACTIVITY then
                activityHasNew = true
            else
                gameHasNew = true
            end
        end
    end
    if UIPostPanelV2.mPostTopTabDict:ContainsKey(PANEL_TYPE.PANEL_ACTIVITY) then
        setactive(UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_ACTIVITY].mTrans_RedPoint, activityHasNew)
    end
    if UIPostPanelV2.mPostTopTabDict:ContainsKey(PANEL_TYPE.PANEL_GAME) then
        setactive(UIPostPanelV2.mPostTopTabDict[PANEL_TYPE.PANEL_GAME].mTrans_RedPoint, gameHasNew)
    end
end

function UIPostPanelV2.OnLabelBtnClicked(gameobj)
    --for i=1,UIPostPanelV2.mPostBtnDict:Count() do
        if(UIPostPanelV2.mPostBtnDict:ContainsKey(gameobj))then
            UIPostPanelV2.mPostBtnDict[gameobj]:OnClicked()
            UIPostPanelV2.mView.mScrRect_ContentList.verticalNormalizedPosition = 1
        end
    --end
end

--function UIPostPanelV2.SendCheckInCallback(ret)
--    self = UIPostPanelV2
--    if(NetCmdCheckInData:IsChecked()) then
--        UICommandCenterPanel:SetMaskEnable(false)  --- 关闭主界面Mask
--    end
--end
