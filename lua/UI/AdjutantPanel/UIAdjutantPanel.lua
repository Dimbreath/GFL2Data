---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.AdjutantPanel.AdjutantItem.UIAdjutantItem");

UIAdjutantPanel = class("UIAdjutantPanel", UIBasePanel);
UIAdjutantPanel.__index = UIAdjutantPanel;

UIAdjutantPanel.mView = nil;
UIAdjutantPanel.mAdjutantTypeItemDict = {};
UIAdjutantPanel.mAdjutantItemList = nil;
UIAdjutantPanel.mCostumeItemList = nil;

UIAdjutantPanel.mCurSelectAdjutantItem = nil;
UIAdjutantPanel.mCurSelectCostumeItem = nil;

UIAdjutantPanel.mGunModelObj = nil;
UIAdjutantPanel.mUIModel = nil;
UIAdjutantPanel.mCharacterSelfShadowSettings = nil;

function UIAdjutantPanel:ctor()
    UIAdjutantPanel.super.ctor(self);
end

function UIAdjutantPanel.Open(currentGun, selectedCount)
    print("selectedCount  = " ..selectedCount)
    self = UIAdjutantPanel;

    UIAdjutantPanel:InitShow();
end

function UIAdjutantPanel.Close()
    UIManager.CloseUI(UIDef.UIAdjutantPanel);
end

function UIAdjutantPanel.Hide()
    self = UIAdjutantPanel;
    self:Show(false);
end

function UIAdjutantPanel.Init(root, data)
    UIAdjutantPanel.super.SetRoot(UIAdjutantPanel, root);

    UIAdjutantPanel.mData = data;

    UIAdjutantPanel.mView = UIAdjutantPanelView;
    UIAdjutantPanel.mView:InitCtrl(root);

end


function UIAdjutantPanel.OnInit()
    self = UIAdjutantPanel;

    self.mAdjutantItemList = List:New();
    self.mCostumeItemList = List:New();

    self.mCharacterSelfShadowSettings = CS.UnityEngine.GameObject.Find("CharacterSelfShadowSettings"):GetComponent("CharacterSelfShadowSettings");
   
    UIUtils.GetButtonListener(self.mView.mBtn_Return.gameObject).onClick = self.OnReturnClick;
    UIUtils.GetButtonListener(self.mView.mBtn_SetButton.gameObject).onClick = self.OnSetButtonClicked;

    self.InitAdjutantItems();
end

function UIAdjutantPanel.OnShow()
    self = UIAdjutantPanel;
end

function UIAdjutantPanel.InitAdjutantItems()
    self = UIAdjutantPanel;

    if(#self.mAdjutantTypeItemDict == 0) then
        local typeList = NetCmdIllustrationData:GetRoleTypeList();

        for i = 0, typeList.Count-1 do
            local rootItem = UIAdjutantTypeListItem.New();
            rootItem:InitCtrl(self.mView.mTrans_characterList);
            rootItem:InitData(typeList[i]);
            self.mAdjutantTypeItemDict[typeList[i].id] = rootItem
        end
    end

    for i = 1, #self.mAdjutantItemList do
        gfdestroy(self.mAdjutantItemList[i].mUIRoot);
    end

    self.mAdjutantItemList:Clear();
    local list = NetCmdIllustrationData:GetAdjutantList();

    for i = 0, list.Length-1 do
        local adjutantItem = UIAdjutantListItem.New();
        local rootItem = self.mAdjutantTypeItemDict[list[i].type];
        adjutantItem:InitCtrl(rootItem.mTrans_CardList);
        adjutantItem:InitData(list[i]);

        local btn = UIUtils.GetButtonListener(adjutantItem.mBtn_Gun.gameObject);
        btn.onClick = self.OnAdjutantItemClicked;
        btn.param = adjutantItem;

        self.mAdjutantItemList:Add(adjutantItem)

        --if(self.mCurSelectAdjutantItem == nil) then
        if(NetCmdIllustrationData.CurAdjutant.adjutantID == list[i].adjutantID) then
            self.OnAdjutantItemClicked(adjutantItem.mBtn_Gun.gameObject);
        end
    end

    UIUtils.ForceRebuildLayout(self.mView.mTrans_characterList)
end

function UIAdjutantPanel.OnAdjutantItemClicked(gameObject)
    self = UIAdjutantPanel;
    local btn = UIUtils.GetButtonListener(gameObject)

    for i = 1, #self.mAdjutantItemList do
        self.mAdjutantItemList[i]:SetSelect(false);
    end

    local item = btn.param;
    self.mCurSelectAdjutantItem = item;
    item:SetSelect(true);

    self.UpdateView(item.mData);
end

function UIAdjutantPanel.UpdateView(data)
    self = UIAdjutantPanel;
    self.mView.mText_NameText.text = data.name;

    for i = 0, self.mView.mTrans_AvatarListLayout.transform.childCount-1 do
		local obj = self.mView.mTrans_AvatarListLayout.transform:GetChild(i);
		gfdestroy(obj);
    end
    
    self.mCostumeItemList:Clear();
    local costumeList = data.CostumeList;

    for i = 0, costumeList.Count-1 do
        local costumeItem = UIAdjutantSkinIconItem.New();
        costumeItem:InitCtrl(self.mView.mTrans_AvatarListLayout);
        costumeItem:SetData(costumeList[i]);

        local btn = UIUtils.GetButtonListener(costumeItem.mBtn_SkinIcon.gameObject);
        btn.onClick = self.OnCostumeClicked;
        btn.param = costumeItem;

        self.mCostumeItemList:Add(costumeItem);

        if(data.defaultSelect == costumeList[i].id) then
            self.mCurSelectCostumeItem = costumeItem;
            self.OnCostumeClicked(costumeItem.mBtn_SkinIcon.gameObject);
        end
    end

    gfdebug(data.currentSelect);
end

function UIAdjutantPanel.OnCostumeClicked(gameObject)
    self = UIAdjutantPanel;
    local btn = UIUtils.GetButtonListener(gameObject)
    self.mCurSelectCostumeItem = btn.param;

    self:UpdateGunModel(self.mCurSelectCostumeItem.mData.model_config_id);
    NetCmdIllustrationData:SetModelAnimation(self.mCurSelectCostumeItem.mData,self.mUIModel);

    for i = 1, #self.mCostumeItemList do
        self.mCostumeItemList[i]:SetClicked(false);
    end
    self.mCurSelectCostumeItem:SetClicked(true);

    if(self.mCurSelectAdjutantItem.mData.isUnlocked) then
        self.mView.mText_Power_AvatarName.text = self.mCurSelectCostumeItem.mData.name.str;
    else
        self.mView.mText_Power_AvatarName.text = "未解锁";
    end

    self.UpdateSetBtn();
end

function UIAdjutantPanel.CheckCostumelocked()
    local costumeData = self.mCurSelectCostumeItem.mData;
    
    if(not self.mCurSelectAdjutantItem.mData.isUnlocked) then
        return true;
    end
    
    if(not NetCmdIllustrationData:CheckCostumeUnlocked(costumeData.id)) then
        return true;
    end

    return false;
end

function UIAdjutantPanel.UpdateSetBtn()
    self = UIAdjutantPanel;
    local costumeData = self.mCurSelectCostumeItem.mData;
    if(NetCmdIllustrationData.CurAdjutant.currentSelect == costumeData.id) then
        setactive(self.mView.mTrans_Is,true);

    elseif(self.CheckCostumelocked()) then
        setactive(self.mView.mTrans_Is,false);
        setactive(self.mView.mTrans_Locked,true);
    else
        setactive(self.mView.mTrans_Is,false);
        setactive(self.mView.mTrans_Locked,false);
    end
end

function UIAdjutantPanel.OnSetButtonClicked()
    self = UIAdjutantPanel;
    local costumeData = self.mCurSelectCostumeItem.mData;
    if(NetCmdIllustrationData.CurAdjutant.currentSelect == costumeData.id) then
        return;
    elseif(self.CheckCostumelocked()) then
        return
    else
        local adjutantId = self.mCurSelectAdjutantItem.mData.adjutantID;
        local costumeId = self.mCurSelectCostumeItem.mData.id;
        NetCmdIllustrationData:SendReqadjutant_setCmd(adjutantId,costumeId,self.SetAdjutantCallBack);
    end
end

function UIAdjutantPanel.SetAdjutantCallBack(ret)
    self = UIAdjutantPanel;
    if ret == CS.CMDRet.eSuccess then
        printstack("设置副官成功");
        self.UpdateView(self.mCurSelectAdjutantItem.mData);
        MessageSys:SendMessage(CS.GF2.Message.ModelDataEvent.ChangeAdjutant,false);
    else
        printstack("设置副官失败");
    end
end


function UIAdjutantPanel:UpdateGunModel(model_id)
	
	if(self.mGunModelObj ~= nil) then
        printstack(self.mGunModelObj.name)
        self.mUIModel:Destroy();
	end
    local modelData = TableData.GetGunModelData(model_id)

    self.mUIModel = UIUtils.GetModelNoWeapon(UIFacilityBarrackPanel.E3DModelType.eGun, model_id, CS.EGetModelUIType.eBarrack);

	self.mGunModelObj = self.mUIModel.gameObject
	self.mGunModelObj.transform.position = Vector3(0,-7.85,-6.1);
    self.mGunModelObj.transform.localEulerAngles = Vector3(0,180,0);
    self.mGunModelObj.transform.localScale = Vector3(7,7,7);

	
	GFUtils.MoveToLayer(self.mGunModelObj.transform,CS.UnityEngine.LayerMask.NameToLayer("Friend"));
    
    self:SetLookAtCharacter(self.mGunModelObj);
end

function UIAdjutantPanel:SetLookAtCharacter(obj)
    if(self.mCharacterSelfShadowSettings ~= nil) then
        self.mCharacterSelfShadowSettings:SetLookAtCharacter(obj);
    end
end



function UIAdjutantPanel.OnRelease()

    self = UIAdjutantPanel;

    self.mCurSelectAdjutantItem = nil;
    self.mCurSelectCostumeItem = nil;
    self.mAdjutantTypeItemDict = {};
    self.mAdjutantItemList:Clear();
    self.mCostumeItemList:Clear();

    self.mUIModel:Destroy();
    self.mGunModelObj = nil
end



function UIAdjutantPanel.OnReturnClick(gameObject)
    UIManager.CloseUI(UIDef.UIAdjutantPanel);
end
