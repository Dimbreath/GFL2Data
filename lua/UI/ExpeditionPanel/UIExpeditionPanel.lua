---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.ExpeditionPanel.UIExpeditionPanelView");
require("UI.ExpeditionTypeItem.UIExpeditionTypeItem");
require("UI.ExpeditionTaskItem.UIExpeditionTaskItem");
require("UI.ExpeditionTeamDispatchItem.UIExpeditionTeamDispatchItem");

UIExpeditionPanel = class("UIExpeditionPanel", UIBasePanel);
UIExpeditionPanel.__index = UIExpeditionPanel;

UIExpeditionPanel.mView = nil;

UIExpeditionPanel.mPath_ExpeditionTypeItem = "Expedition/UIExpeditionTypeItem.prefab";
UIExpeditionPanel.mPath_ExpeditionTaskItem = "Expedition/UIExpeditionTaskItem.prefab";
UIExpeditionPanel.mPath_ExpeditionTeamDispatchItem = "Expedition/UIExpeditionTeamDispatchItem.prefab";

UIExpeditionPanel.mCurSelectedTypeId = 0;
UIExpeditionPanel.mTypeItemList = nil;
UIExpeditionPanel.mTaskItemList = nil;
UIExpeditionPanel.mTaskRefreshTimer = nil;
UIExpeditionPanel.mAllTaskInfoList = nil;

UIExpeditionPanel.mTaskIdCancelling = 0;
UIExpeditionPanel.TypeNameConstants = {"金币","经验书","钻石","代币"};

UIExpeditionPanel.IsPanelOpened = false;

function UIExpeditionPanel:ctor()
    UIExpeditionPanel.super.ctor(self);
end

function UIExpeditionPanel.Open()
    UIExpeditionPanel.OpenUI(UIDef.UIExpeditionPanel);
    UIExpeditionPanel.IsPanelOpened = true;
end

function UIExpeditionPanel.Close()
    UIManager.CloseUI(UIDef.UIExpeditionPanel);
    UIExpeditionPanel.IsPanelOpened = false;
end

function UIExpeditionPanel.Init(root, data)
    self = UIExpeditionPanel;
    self.mData = data;
    self:SetRoot(root);

    UIExpeditionPanel.IsPanelOpened = true;
end


function UIExpeditionPanel.OnInit()
    self = UIExpeditionPanel;

    --local parent = UIUtils.FindTransform(UIExpeditionPanel.m3DCanvasRootPath);
    --UIExpeditionPanel.super.SetRootToParent(UIExpeditionPanel, self.mUIRoot, parent);

    self.mView = UIExpeditionPanelView;
    self.mView:InitCtrl(self.mUIRoot);

    UIUtils.GetButtonListener(self.mView.mBtn_TopInformation_Return.gameObject).onClick = self.OnReturnClick;

    MessageSys:AddListener(CS.GF2.Message.ExpeditionEvent.ExpeditionFinished,self.OnGetFinishResult);
    MessageSys:AddListener(CS.GF2.Message.ExpeditionEvent.ExpeditionGoAgain,self.OnExpeditionAgain);

    self.mTypeItemList=List:New();
    self.mTaskItemList=List:New();

    self.mAllTaskInfoList = NetCmdExpeditionData:GetAllExpeditionList();
    self:InitResources();
    self:InitTypeItems();
    self.CheckTaskFinish();
end

function UIExpeditionPanel:InitResources()
    self.mView.mText_TopInformation_Coin_BodyCoin_CoinAmount.text = GlobalData.stamina_ext;
    self.mView.mText_TopInformation_Coin_GoldCoin_CoinAmount.text = GlobalData.cash;

    local data = NetCmdItemData:GetNormalItem(201);
	if(data ~= nil) then
		self.mView.mText_TopInformation_Coin_TokenCoin_CoinAmount.text= data.item_num;
	else
		self.mView.mText_TopInformation_Coin_TokenCoin_CoinAmount.text = 0;
    end
end

function UIExpeditionPanel:InitTypeItems()
    local prefab = UIUtils.GetGizmosPrefab(self.mPath_ExpeditionTypeItem,self);
    
    for i = 1, 4 do
        local instObj = instantiate(prefab);
        local item = UIExpeditionTypeItem.New();
        item:InitCtrl(instObj.transform);
        item:InitData(UIExpeditionPanel.TypeNameConstants[i],i);

        local itemBtn = UIUtils.GetButtonListener(item.mUIRoot.gameObject);
	    itemBtn.onClick = self.OnTypeItemClicked;
	    itemBtn.param = item;
	    itemBtn.paramData = nil;
        
        UIUtils.AddListItem(instObj, self.mView.mVLayout_ExpeditionTypeListPanel_ExpeditionTypeList.transform);

        self.mTypeItemList:Add(item);
    end
  
    self.mCurSelectedTypeId = 1;
    self.OnTypeItemClicked(self.mTypeItemList[1].mUIRoot.gameObject);

end

function UIExpeditionPanel:InitTaskItems( )
    local prefab = UIUtils.GetGizmosPrefab(self.mPath_ExpeditionTaskItem,self);
    local taskInfoList = NetCmdExpeditionData:GetExpeditionListByType(self.mCurSelectedTypeId);

    for i = 1,self.mTaskItemList:Count() do
        self.mTaskItemList[i]:InitData(nil);
    end

    for i = 0,taskInfoList.Count - 1 do

        local item = nil;

        if self.mTaskItemList[i+1] == nil then
            item = UIExpeditionTaskItem.New();
            local instItem = instantiate(prefab);
            item:InitCtrl(instItem.transform);
            UIUtils.AddListItem(instItem, self.mView.mVLayout_ExpeditionTaskListPanel_ExpeditionTaskList.transform);

            local click = UIUtils.GetButtonListener(item.mBtn_ExpeditionTaskInformation_GoExpedition_GoExpedition.gameObject);
            click.onClick = self.OnGoExpeditionClicked;
            click.param = item;
            click.paramData = nil;

            click = UIUtils.GetButtonListener(item.mBtn_ExpeditionTaskInformation_GoExpedition_CancelExpedition.gameObject);
	        click.onClick = self.OnCancelExpeditionClicked;
	        click.param = item;
	        click.paramData = nil;

            self.mTaskItemList:Add(item);
        else
            item = self.mTaskItemList[i+1];

            local clickItem = getcomponent(item.mBtn_ExpeditionTaskInformation_GoExpedition_GoExpedition.gameObject, typeof(CS.ButtonEventTriggerListener));
            clickItem.param = item;
            clickItem.paramData = nil;

            local clickItem = getcomponent(item.mBtn_ExpeditionTaskInformation_GoExpedition_CancelExpedition.gameObject, typeof(CS.ButtonEventTriggerListener));
            clickItem.param = item;
            clickItem.paramData = nil;
        end

        if item ~= nil then
            item:InitData(taskInfoList[i]);
        end
    end

    self:InitTeamItems();
end

function UIExpeditionPanel:InitTeamItems()
    local prefab = UIUtils.GetGizmosPrefab(self.mPath_ExpeditionTeamDispatchItem,self);
    local dispatchList = NetCmdExpeditionData:GetDispatchedDataList();
    
    for i = 0, self.mView.mVLayout_ExpeditionTeamPanel_ExpeditionTeamList.transform.childCount-1 do
		local obj = self.mView.mVLayout_ExpeditionTeamPanel_ExpeditionTeamList.transform:GetChild(i);
		gfdestroy(obj);
    end
    
    for i = 0, dispatchList.Count - 1 do
        local instObj = instantiate(prefab);
        local item = UIExpeditionTeamDispatchItem.New();
        item:InitCtrl(instObj.transform);
        item:InitData(dispatchList[i]);

        local itemBtn = UIUtils.GetButtonListener(item.mUIRoot.gameObject);
	    itemBtn.onClick = self.OnTeamItemClicked;
	    itemBtn.param = item;
	    itemBtn.paramData = nil;
        
        UIUtils.AddListItem(instObj, self.mView.mVLayout_ExpeditionTeamPanel_ExpeditionTeamList.transform);
    end

    self.mView.mText_ExpeditionTeamPanel_ExpeditionTeamDispatchInformation.text = "派遣情况" .. dispatchList.Count .."/" .. NetCmdExpeditionData.LimitDispatch;
end

function UIExpeditionPanel.OnTypeItemClicked(gameobj)
    self = UIExpeditionPanel;
    local eventTrigger = getcomponent(gameobj, typeof(CS.ButtonEventTriggerListener));
    if eventTrigger ~= nil then
        for i = 1, self.mTypeItemList:Count() do
            self.mTypeItemList[i]:SetSelect(false);
        end

		local item = eventTrigger.param;
        self.mCurSelectedTypeId = item.mId;
        item:SetSelect(true);

        self:InitTaskItems();
	end
end

function UIExpeditionPanel.OnTeamItemClicked(gameobj)
    self = UIExpeditionPanel;
    local eventTrigger = getcomponent(gameobj, typeof(CS.ButtonEventTriggerListener));
    if eventTrigger ~= nil then      
		local item = eventTrigger.param;
        local typeObj = self.mTypeItemList[item.mData.Type].mUIRoot.gameObject;

        self.OnTypeItemClicked(typeObj);
	end
end

-- function UIExpeditionPanel.CenterOnSelectedItem()
-- 	self = UIExpeditionPanel;
-- 	local target = self.mSelectedItem.mUIRoot.transform;
-- 	local scrollRect = self.mView.mCoresScrollRect;
-- 	local viewPort = self.mView.mCoresScrollRect.transform;
-- 	local content = self.mView.mImage_UI_CoreList.transform;
	
-- 	local normalizedPos = CS.UICoreDragUtility.CenterOnItem(target,scrollRect,viewPort,content);
-- 	DOTween.TweenPosition(self.GetTweenPos, self.SetTweenPos, normalizedPos, FacilityBarrackData.mTweenCameraTime);
-- end

-- function UIExpeditionPanel.GetTweenPos()
--     return self.mView.mCoresScrollRect.normalizedPosition;
-- end

-- function UIExpeditionPanel.SetTweenPos(position)
--     self.mView.mCoresScrollRect.normalizedPosition = position;
-- end

function UIExpeditionPanel.OnGoExpeditionClicked(gameobj)
    self = UIExpeditionPanel;

    local dispatchList = NetCmdExpeditionData:GetDispatchedDataList();

    if(dispatchList.Count  >= NetCmdExpeditionData.LimitDispatch) then
        local title = TableData.GetHintById(501);
        local msg = TableData.GetHintById(502);
        MessageBox.Show(title, msg, MessageBox.ShowFlag.eMidBtn, nil, nil, nil);
        return;
    end

    local eventTrigger = getcomponent(gameobj, typeof(CS.ButtonEventTriggerListener));
    if eventTrigger ~= nil then
        local item = eventTrigger.param;       
        UIManager.OpenUIByParam(UIDef.UIExpeditionTaskPanel, item.mData);
	end
end

function UIExpeditionPanel.OnCancelExpeditionClicked(gameobj)
    self = UIExpeditionPanel;
    local eventTrigger = getcomponent(gameobj, typeof(CS.ButtonEventTriggerListener));
    if eventTrigger ~= nil then
        local item = eventTrigger.param;
        
        local title = TableData.GetHintById(503);
        local msg = TableData.GetHintById(504);
        MessageBox.Show(title,msg,item,self.DoCancel,nil);
	end
end

function UIExpeditionPanel.DoCancel(item)
    self = UIExpeditionPanel;
    NetCmdExpeditionData:SendDungeonCancelMission(item.mData.Id,self.OnCancelExpeditionCallback);
    self.mTaskIdCancelling = item.mData.Id;
end

function UIExpeditionPanel.OnCancelExpeditionCallback(ret)
    self = UIExpeditionPanel;
	
	if ret == CS.CMDRet.eSuccess then
        gfdebug("远征取消成功");
        NetCmdExpeditionData:RemoveExpeditionById(self.mTaskIdCancelling);
        self:InitTaskItems();
        self:InitResources();
	else
		gfdebug("远征取消失败");
	end	
end

function UIExpeditionPanel.CheckTaskFinish()
    self = UIExpeditionPanel;

	self.mTaskRefreshTimer = TimerSys:DelayCall(2, self.CheckTaskFinish, nil);
    
    for i = 0,self.mAllTaskInfoList.Count - 1 do
        local taskData = self.mAllTaskInfoList[i];
        local progress = taskData.Progress;

        if(progress >= 1) then
            NetCmdExpeditionData:SendDungeonFinishMission(taskData.Id,self.OnExpeditionFinishCallback);
        end
    end
end

function UIExpeditionPanel.OnGetFinishResult(msg)
	self = UIExpeditionPanel;
    local missionFinishData = msg.Content;
    UIManager.OpenUIByParam(UIDef.UIExpeditionSettlementPanel, missionFinishData);
end

function UIExpeditionPanel.OnExpeditionAgain(msg)
	self = UIExpeditionPanel;
    self:InitTaskItems();
end


function UIExpeditionPanel.OnExpeditionFinishCallback(ret)
    self = UIExpeditionPanel;
	
	if ret == CS.CMDRet.eSuccess then
        gfdebug("远征完成成功");
        self:InitTaskItems();
        self:InitResources();
	else
		gfdebug("远征完成失败");
	end	
end

function UIExpeditionPanel:ClearTimers()
    if(self.mTaskRefreshTimer ~= nil) then
        self.mTaskRefreshTimer:Stop()
        -- TimerSys:Remove(self.mTaskRefreshTimer);
        self.mTaskRefreshTimer = nil;
    end

    for i = 1,self.mTaskItemList:Count() do
        local timer = self.mTaskItemList[i].mCountDownTimer;
        if(timer ~= nil) then
            timer:Stop()
            -- TimerSys:Remove(timer);
            self.mTaskItemList[i].mCountDownTimer = nil;
        end
    end
end

function UIExpeditionPanel.OnShow()
    self = UIExpeditionPanel;
end

function UIExpeditionPanel.OnRelease()
    self = UIExpeditionPanel;
    self:ClearTimers();
    self.mTypeItemList = {};
    self.mTaskInfoList = nil;

    MessageSys:RemoveListener(CS.GF2.Message.ExpeditionEvent.ExpeditionFinished,self.OnGetFinishResult);
    MessageSys:RemoveListener(CS.GF2.Message.ExpeditionEvent.ExpeditionGoAgain,self.OnExpeditionAgain);
end

function UIExpeditionPanel.OnReturnClick(gameobj)	
    self = UIExpeditionPanel;
	self.Close();
end

