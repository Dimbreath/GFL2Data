---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.CharacterPowerUpPanel.UICharacterPowerUpPanelView");

UICharacterPowerUpPanel = class("UICharacterPowerUpPanel", UIBasePanel);
UICharacterPowerUpPanel.__index = UICharacterPowerUpPanel;

UICharacterPowerUpPanel.mView = nil;
UICharacterPowerUpPanel.mCmdItemsHandle = nil;


UICharacterPowerUpPanel.mAdditionPower = 0;
UICharacterPowerUpPanel.mAdditionHit = 0;
UICharacterPowerUpPanel.mAdditionDodge = 0;
UICharacterPowerUpPanel.mAdditionArmor = 0;

UICharacterPowerUpPanel.mCapsuleCount = 0;

UICharacterPowerUpPanel.mIsRRefresh = false;
UICharacterPowerUpPanel.mFramer = 0;
UICharacterPowerUpPanel.mRRefreshCount = 5;
UICharacterPowerUpPanel.mCurrentGun = nil;

UICharacterPowerUpPanel.mAdditionDelta = 1;
UICharacterPowerUpPanel.mGunAugmentArray = nil;

function UICharacterPowerUpPanel:ctor()
    UICharacterPowerUpPanel.super.ctor(self);
end

function UICharacterPowerUpPanel.Open(currentGun)
    self = UICharacterPowerUpPanel;
    self.mCurrentGun = currentGun;
    self:InitShow();
end

function UICharacterPowerUpPanel.Close()
    UIManager.CloseUI(UIDef.UICharacterPowerUpPanel);
end

function UICharacterPowerUpPanel.Hide()
    UICharacterPowerUpPanel:Show(false);
end

function UICharacterPowerUpPanel.Init(root, data)
    UICharacterPowerUpPanel.super.SetRoot(UICharacterPowerUpPanel, root);

    UICharacterPowerUpPanel.mData = data;
    UICharacterPowerUpPanel.mView = UICharacterPowerUpPanelView;
    UICharacterPowerUpPanel.mView:InitCtrl(root);
end

function UICharacterPowerUpPanel:InitShow()

    self:Show(true);
    self:SetCapsuleNum(NetCmdItemsData:GetItemCount(CmdConst.ItemCapsule));
    --reference UIFacilityBarrackPanel

    self:SetDataBase(self.mCurrentGun);

    self.mView:ShowOrigView(0);
    self.mGunAugmentArray = List:New(CS.Cmd.GunAugment);

    UIUtils.GetButtonListener(self.mView.mButton_UI_PowerUpConfirmButton.gameObject).onClick = self.OnConfirmClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_PowerUpResetButton.gameObject).onClick = self.OnResetClick;

    UIUtils.GetButtonListener(self.mView.mButton_UI_AttackMinusButton.gameObject).onClick = self.OnAttackPlusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_AttackPlusButton.gameObject).onClick = self.OnAttackMinusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_HitMinusButton.gameObject).onClick = self.OnHitPlusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_HitPlusButton.gameObject).onClick = self.OnHitMinusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_DodgeMinusButton.gameObject).onClick = self.OnDodgePlusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_DodgePlusButton.gameObject).onClick = self.OnDodgeMinusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_ArmorMinusButton.gameObject).onClick = self.OnArmorPlusClick;
    UIUtils.GetButtonListener(self.mView.mButton_UI_ArmorPlusButton.gameObject).onClick = self.OnArmorMinusClick;
end

function UICharacterPowerUpPanel.OnInit()

end

function UICharacterPowerUpPanel.OnShow()
    self = UICharacterPowerUpPanel;
end

function UICharacterPowerUpPanel.OnRelease()
    self = UICharacterPowerUpPanel;
end

function UICharacterPowerUpPanel:SetDataBase(gunInfo)
    self.mView:SetDataBase(gunInfo);
end

function UICharacterPowerUpPanel:SetCapsuleNum(num)
    self.mView:SetCapsule(num);
end

-- pow => 1,hit => 2,dodge => 3,armor => 4
function UICharacterPowerUpPanel.OnConfirmClick(gameObject)
    self = UICharacterPowerUpPanel;

    print(" ".. self.mAdditionPower.." ".. self.mAdditionHit.." ".. self.mAdditionDodge.." ".. self.mAdditionArmor);
    if self.mAdditionPower == 0 and self.mAdditionHit == 0 and
    self.mAdditionDodge == 0 and self.mAdditionArmor == 0 then
        return;
    end

    if self.mAdditionPower > 0 then
        local powAugment = CS.Cmd.GunAugment();
        powAugment.property = 1;
        powAugment.times = self.mAdditionPower;

        self.mGunAugmentArray:Add(powAugment);
    end

    if self.mAdditionHit > 0 then
        local powAugment = CS.Cmd.GunAugment();
        powAugment.property = 2;
        powAugment.times = self.mAdditionHit;

        self.mGunAugmentArray:Add(powAugment);
    end

    if self.mAdditionDodge > 0 then
        local powAugment = CS.Cmd.GunAugment();
        powAugment.property = 3;
        powAugment.times = self.mAdditionDodge;

        self.mGunAugmentArray:Add(powAugment);
    end

    if self.mAdditionArmor > 0 then
        local powAugment = CS.Cmd.GunAugment();
        powAugment.property = 4;
        powAugment.times = self.mAdditionArmor;

        self.mGunAugmentArray:Add(powAugment);
    end

    FacilityBarrackData.SendCmdPowerUpGun(self.mGunAugmentArray);
    self.mGunAugmentArray:Clear();
end

function UICharacterPowerUpPanel.OnResetClick(gameObject)
    self:ResetData();
end

function UICharacterPowerUpPanel:ResetData()

    self.mAdditionArmor = 0;
    self.mAdditionDodge = 0;
    self.mAdditionHit = 0;
    self.mAdditionPower = 0
    self.mCapsuleCount = 0;
    self.mGunAugmentArray:Clear();
    self.mView:ResetView();
end

function UICharacterPowerUpPanel.RefreshDetail()
    UICharacterPowerUpPanel.mCurrentGun = FacilityBarrackData.CurrentTrainGun;
    UICharacterPowerUpPanel:SetDataBase(UICharacterPowerUpPanel.mCurrentGun);

    UICharacterPowerUpPanel:ResetData();
    UICharacterPowerUpPanel:SetCapsuleNum(NetCmdItemsData:GetItemCount(CmdConst.ItemCapsule));
end

function UICharacterPowerUpPanel.OnUpdate()
    if not UICharacterPowerUpPanel.IsActive then
        return;
    end

    UICharacterPowerUpPanel.mFramer = UICharacterPowerUpPanel.mFramer + 1;
    if UICharacterPowerUpPanel.mFramer >= UICharacterPowerUpPanel.mRRefreshCount then
        if not UICharacterPowerUpPanel.mIsRRefresh then
            UICharacterPowerUpPanel.mView:ForceUpdate();
            UICharacterPowerUpPanel.mIsRRefresh = true;
            UICharacterPowerUpPanel.mFramer = 0;
        end
    end
end

---------------------------------power-------------------------------
function UICharacterPowerUpPanel.OnAttackMinusClick(gameObject)
    local additionNum = self.mAdditionPower - self.mAdditionDelta;
    if additionNum < 0 then
        return;
    end

    self.mAdditionPower = additionNum;
    self.mCapsuleCount = self.mCapsuleCount - self.mAdditionDelta;

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetPowerAddition(self.mAdditionPower);
end

function UICharacterPowerUpPanel.OnAttackPlusClick(gameObject)
    local additionNum = self.mAdditionPower + self.mAdditionDelta;
    if self.mAdditionPower ~= 0 then
        if additionNum + self.mCurrentGun.PUPow > self.mCurrentGun.max_pow then
            return;
        else
            self.mAdditionPower = additionNum;
            self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
        end
    else
        if additionNum + self.mCurrentGun.PUPow > self.mCurrentGun.max_pow then
            return;
        else
            self.mAdditionPower = additionNum;
        end
        self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
    end

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetPowerAddition(self.mAdditionPower);
end

---------------------------------hit-------------------------------
function UICharacterPowerUpPanel.OnHitMinusClick(gameObject)
    local additionNum = self.mAdditionHit - self.mAdditionDelta;
    if additionNum < 0 then
        return;
    end

    self.mAdditionHit = additionNum;
    self.mCapsuleCount = self.mCapsuleCount - self.mAdditionDelta;

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetHitAddition(self.mAdditionHit);
end

function UICharacterPowerUpPanel.OnHitPlusClick(gameObject)
    local additionNum = self.mAdditionHit + self.mAdditionDelta;

    if self.mAdditionHit ~= 0 then
        if additionNum + self.mCurrentGun.PUHit > self.mCurrentGun.max_hit then
            return;
        else
            self.mAdditionHit = additionNum;
            self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
        end
    else
        if additionNum + self.mCurrentGun.PUHit > self.mCurrentGun.max_hit then
            return;
        else
            self.mAdditionHit = additionNum;
        end
        self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
    end

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetHitAddition(self.mAdditionHit);
end

---------------------------------dodge-------------------------------
function UICharacterPowerUpPanel.OnDodgeMinusClick(gameObject)
    local additionNum = self.mAdditionDodge - self.mAdditionDelta;
    if additionNum < 0 then
        return;
    end

    self.mAdditionDodge = additionNum;
    self.mCapsuleCount = self.mCapsuleCount - self.mAdditionDelta;

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetDodgeAddition(self.mAdditionDodge);
end

function UICharacterPowerUpPanel.OnDodgePlusClick(gameObject)
    local additionNum = self.mAdditionDodge + self.mAdditionDelta;

    if self.mAdditionDodge ~= 0 then
        if additionNum + self.mCurrentGun.PUDodge > self.mCurrentGun.max_dodge then
            return;
        else
            self.mAdditionDodge = additionNum;
            self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
        end
    else
        if additionNum + self.mCurrentGun.PUDodge > self.mCurrentGun.max_dodge then
            return;
        else
            self.mAdditionDodge = additionNum;
        end
        self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
    end

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetDodgeAddition(self.mAdditionDodge);
end

---------------------------------armor-------------------------------
function UICharacterPowerUpPanel.OnArmorMinusClick(gameObject)
    local additionNum = self.mAdditionArmor - self.mAdditionDelta;
    if additionNum < 0 then
        return;
    end

    self.mAdditionArmor = additionNum;
    self.mCapsuleCount = self.mCapsuleCount - self.mAdditionDelta;

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetArmorAddition(self.mAdditionArmor);
end

function UICharacterPowerUpPanel.OnArmorPlusClick(gameObject)
    local additionNum = self.mAdditionArmor + self.mAdditionDelta;

    if self.mAdditionArmor ~= 0 then
        if additionNum + self.mCurrentGun.PUArmor > self.mCurrentGun.max_armor then
            return;
        else
            self.mAdditionArmor = additionNum;
            self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
        end
    else
        if additionNum + self.mCurrentGun.PUArmor > self.mCurrentGun.max_armor then
            return;
        else
            self.mAdditionArmor = additionNum;
        end
        self.mCapsuleCount = self.mCapsuleCount + self.mAdditionDelta;
    end

    self.mView:ShowOrigView(self.mCapsuleCount);
    self.mView:SetArmorAddition(self.mAdditionArmor);
end