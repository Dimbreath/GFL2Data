---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.DailyQuestPanel.UIDailyQuestPanelView")


UIDailyQuestPanel = class("UIDailyQuestPanel", UIBasePanel);
UIDailyQuestPanel.__index = UIDailyQuestPanel;

UIDailyQuestPanel.mView = nil;

UIDailyQuestPanel.mDailyQuestItemList=nil;
UIDailyQuestPanel.mWeeklyQuestItemList=nil;
UIDailyQuestPanel.mEnemyData=nil;

UIDailyQuestPanel.mUIGetChapterRewardItemList=nil;

UIDailyQuestPanel.mCurTaskTab = nil
UIDailyQuestPanel.mCurType=nil;
UIDailyQuestPanel.mStep=1;
UIDailyQuestPanel.mIsRewardListLoaded = false;

UIDailyQuestPanel.mUICommonReceiveItem=nil;
UIDailyQuestPanel.mUICommonReceiveItemData=nil;

UIDailyQuestPanel.mTweenExpo = CS.DG.Tweening.Ease.InOutCirc;

UIDailyQuestPanel.mDailyVirtualList = nil;
UIDailyQuestPanel.mDataList = nil;

UIDailyQuestPanel.mTaskTypeList = {}
UIDailyQuestPanel.mActiveRewardIndex = 0
UIDailyQuestPanel.mDailyTaskList = {}
UIDailyQuestPanel.mNewbieQuestItemList = {}
UIDailyQuestPanel.mNewbieQuestTabList = {}

UIDailyQuestPanel.mDailyRewardList = {}
UIDailyQuestPanel.mCurSelectNewbiePharseData = nil;

UIDailyQuestPanel.mPath_UICommonItemS = "UICommonFramework/UICommonItemS.prefab";
UIDailyQuestPanel.mPath_UIQuestTypeItem = "UICommonFramework/ComLeftTab1ItemV2.prefab"
UIDailyQuestPanel.mPath_UIDailyRewardItem = "DailyQuest/DailyQuestRewardItemV2.prefab"

UIDailyQuestPanel.mPath_UICommonItemList = "UICommonFramework/UICommonItemList.prefab"
UIDailyQuestPanel.mUIDailyRewardItem = nil;
UIDailyQuestPanel.mIsCanGetDailyRewardId = 0;
UIDailyQuestPanel.mIsFinishDailyReward = false;
UIDailyQuestPanel.showGet = true

function UIDailyQuestPanel:ctor()
	UIDailyQuestPanel.super.ctor(self);
end

function UIDailyQuestPanel.Open()
	self = UIDailyQuestPanel;
end

function UIDailyQuestPanel.Close()
	self = UIDailyQuestPanel;

	UIManager.CloseUI(UIDef.UIDailyQuestPanel);
end

function UIDailyQuestPanel.Hide()
	self = UIDailyQuestPanel;
	self:Show(false);
end

function UIDailyQuestPanel.Init(root, data)
	UIDailyQuestPanel.super.SetRoot(UIDailyQuestPanel, root);
	UIDailyQuestPanel.mData = data;

	self.RedPointType = {RedPointConst.Daily}
	
	UIDailyQuestPanel.mView = UIDailyQuestPanelView;
	UIDailyQuestPanel.mView:InitCtrl(root);

	UIDailyQuestPanel.mDailyQuestItemList=List:New();
	UIDailyQuestPanel.mNewbieQuestItemList = List:New();
	UIDailyQuestPanel.mUIGetChapterRewardItemList=List:New();

	-- todo 刷新 UIDailyQuestPanel.mView.mText_DailyQuestPanel_RefreshCountText.text = TableData.GetHintById(70001)
end

function UIDailyQuestPanel.OnInit()
	self = UIDailyQuestPanel;

	UIUtils.GetButtonListener(self.mView.mBtn_Close.gameObject).onClick = self.OnExitClicked

	UIUtils.GetButtonListener(self.mView.mBtn_CommandCenter.gameObject).onClick = function()
		UIManager.JumpToMainPanel()
	end

	self:InitTaskTab()
	self:UpdateRedPoint()
	self.UpdateTabRedPoint()
end

function UIDailyQuestPanel.OnHide()
	self = UIDailyQuestPanel;
	MessageSys:RemoveListener(CS.GF2.Message.UIEvent.RefreshDailyPanel, self.OnRefreshDailyPanel)
	MessageSys:RemoveListener(CS.GF2.Message.RedPointEvent.RedPointUpdate, self.AutoTakeAndRefresh)
end

function UIDailyQuestPanel.OnShow()
	self = UIDailyQuestPanel;
	MessageSys:AddListener(CS.GF2.Message.UIEvent.RefreshDailyPanel, self.OnRefreshDailyPanel)
	MessageSys:AddListener(CS.GF2.Message.RedPointEvent.RedPointUpdate, self.AutoTakeAndRefresh)
	self.AutoTakeAndRefresh()
end

function UIDailyQuestPanel.AutoTakeAndRefresh()
	self = UIDailyQuestPanel;
	--自动领取
	self.mDataList = NetCmdQuestData:GetQuestListDatasByType(1)
	--local hasCallback = true;
	local ids = {}
	local index = 1;
	for i = 0, self.mDataList.Count - 1 do
		local data = self.mDataList[i]
		if data.isComplete == true and data.isReceived == false then
			--self.OnAutoTakeQuestRewardClick(data,hasCallback);
			--hasCallback = false
			ids[index] = data.Id
			index = index + 1
		end
	end

	if(#ids > 0) then
		self.showGet = false
		self.OnAutoTakeQuestRewardClick(ids);
	end
	
	self:UpdatePanel()
	self:UpdateRedPoint()
	self.UpdateTabRedPoint()
end

function UIDailyQuestPanel.OnRelease()
	self = UIDailyQuestPanel;
	self.mIsRewardListLoaded = false;
	self.mUICommonReceiveItem=nil;
	self.mUICommonReceiveItemData = nil;
	self.mTaskTypeList = {}
	self.mDailyTaskList = {}
	self.mNewbieQuestItemList = {}
	self.mDailyRewardList = {};
	self.mCurTaskTab = nil
	self.mUIDailyRewardItem = nil;
	self.mCurSelectNewbiePharseData  = nil;
	self.mNewbieQuestTabList = {}
	self.showGet = true
end

function UIDailyQuestPanel.OnRefreshDailyPanel(msg)
	self = UIDailyQuestPanel;
	local itemList = {}
	local rewardIdList = msg.Content

	local rewardItems = {};
	for i = 0, rewardIdList.Count - 1 do
		local rewardList  =  TableData.listDailyRewardDatas:GetDataById(rewardIdList[i]).RewardList;
		for k ,v in pairs(rewardList) do
			local tempNum =0;
			if rewardItems[k] ~= nil then
				tempNum =rewardItems[k]
			end
			rewardItems[k] = tempNum +v;
		end
	end

	for id, num in pairs(rewardItems) do
		local item = {}
		item.ItemId	 = id
		item.ItemNum = num
		item.RelateId = 0

		table.insert(itemList, item)
	end
	table.sort(itemList, function (a, b)
		local data1 = TableData.GetItemData(a.ItemId)
		local data2 = TableData.GetItemData(b.ItemId)
		local typeData1 = TableData.listItemTypeDescDatas:GetDataById(data1.type)
		local typeData2 = TableData.listItemTypeDescDatas:GetDataById(data2.type)

		if typeData1.rank == typeData2.rank then
			if data1.rank == data2.rank then
				return a.RelateId < b.RelateId
			end
			return data1.rank > data2.rank
		end
		return typeData1.rank > typeData2.rank
	end)

	UIManager.OpenUIByParam(UIDef.UICommonReceivePanel, {itemList, function()
		if AccountNetCmdHandler.IsLevelUpdate==true then
			UICommonLevelUpPanel.Open(UICommonLevelUpPanel.ShowType.CommanderLevelUp, nil, true)
		end
	end});
	
	self:UpdatePanel()
	self:UpdateRedPoint()
end

function UIDailyQuestPanel.OnUpdateTop()
	self = UIDailyQuestPanel;
end

function UIDailyQuestPanel:InitTaskTab()
	local taskTabs = TableData.listTaskTypeDatas:GetList()

	local taskTabsTable = {};
	for i = 0, taskTabs.Count - 1 do
		if taskTabs[i].Sequence ~=0 then
			table.insert(taskTabsTable, taskTabs[i])
		end
	end

	table.sort(taskTabsTable, function(a,b)
			return a.Sequence < b.Sequence;
		end)


	if taskTabsTable then
		local default = 3;

		if(UIDailyQuestPanel.mData ~= nil) then
			default = UIDailyQuestPanel.mData
		end

		for i = 1, #taskTabsTable  do
			local taskTab = nil
			if i  <= #self.mTaskTypeList then
				taskTab = self.mTaskTypeList[i]
			else
				local prefab = UIUtils.GetGizmosPrefab(UIDailyQuestPanel.mPath_UIQuestTypeItem,self);
				if prefab then
					local gObj = instantiate(prefab)
					taskTab = UIQuestTypeItem.New()
					taskTab:InitCtrl(gObj.transform)
					UIUtils.AddListItem(gObj, self.mView.mVLayout_TypeList.transform)
					UIUtils.GetButtonListener(taskTab.mBtn_Sel.gameObject).onClick = function(gObj)
						self:OnClickTaskTab(gObj, taskTab)
					end
					table.insert(self.mTaskTypeList, taskTab)
				end
			end
			if taskTab then
				taskTab:SetData(taskTabsTable[i])

				if AccountNetCmdHandler:CheckSystemIsUnLock(taskTabsTable[i].unlock) then
					if  UIDailyQuestPanel.mData == nil and default ~= -1 then
						self:OnClickTaskTab(nil, taskTab)
						default = -1;
					else
						if(taskTabsTable[i].type == default) then
							self:OnClickTaskTab(nil, taskTab)
							default = -1;
						end
					end
				end

				-- if taskTabsTable[i].type == default and AccountNetCmdHandler:CheckSystemIsUnLock(taskTabsTable[i].unlock) then
				-- 	self:OnClickTaskTab(nil, taskTab)
				-- elseif UIDailyQuestPanel.mData == nil then
				-- 	default = 1;
				-- end
			end
		end
	end

	self.mCurSelectNewbiePharseData = nil
	local phaseList = TableData.listGuideQuestPhaseDatas:GetList()
    local tabList = {}
	for i = 0, phaseList.Count-1 do
		local newbieTab = UIComTabBtn1Item.New()
		newbieTab:InitCtrl(self.mView.mTrans_NewbieTaskTabList);
		newbieTab:SetData(phaseList[i])
		tabList[i+1] = newbieTab;
		self.mNewbieQuestTabList[i+1] = newbieTab

		UIUtils.GetButtonListener(newbieTab.mBtn_Item.gameObject).onClick = function(gObj)
			if(newbieTab:IsLocked()) then
				local hint = TableData.GetHintById(60058)
				CS.PopupMessageManager.PopupString(hint)
				return
			end

			self.mCurSelectNewbiePharseData = phaseList[i]
			self:UpdateNewbieTaskList()

			for i = 1, #tabList do
				tabList[i]:SetSelect(false)
			end
			newbieTab:SetSelect(true)
		end

		if(NetCmdQuestData:CheckNewbiePhaseIsReceived(phaseList[i].id) == false) then
			if(self.mCurSelectNewbiePharseData == nil) then
				self.mCurSelectNewbiePharseData = phaseList[i]
				self:UpdateNewbieTaskList()
				newbieTab:SetSelect(true)
			end
		end
	end

	if(self.mCurSelectNewbiePharseData == nil) then
		self.mCurSelectNewbiePharseData = phaseList[0]
		tabList[1]:SetSelect(true)
	end

end

function UIDailyQuestPanel:UpdateNewbieTab()
	for i = 1, #self.mNewbieQuestTabList do
		local tab = self.mNewbieQuestTabList[i]
		tab:UpdateLock();
	end
end

function UIDailyQuestPanel:OnClickTaskTab(gObj, item)
	if(TipsManager.NeedLockTips(item.data.unlock)) then

		return
	end

	if self.mCurTaskTab ~= nil then
		if item.data.type ~= self.mCurTaskTab.data.type then
			self.mCurTaskTab:SetItemState(false)
		else
			return
		end
	end
	item:SetItemState(true)
	self.mCurTaskTab = item
	self:UpdatePanel()
end

function UIDailyQuestPanel:UpdatePanel()
	setactive(self.mView.mTrans_DailyQuestPanel, false)
	setactive(self.mView.mTrans_NewbieTaskPanel, false)
	if self.mCurTaskTab then
		setactive(self.mView.mTrans_DailyQuestPanel, self.mCurTaskTab.data.type == 1)
		setactive(self.mView.mTrans_NewbieTaskPanel, self.mCurTaskTab.data.type == 3)

		self.UpdateQuestView()
	end
end


function UIDailyQuestPanel.DailyItemProvider()
	self = UIDailyQuestPanel;
	local itemview = UIDailyQuestListItem.New();
	itemview:InitCtrl();
	local renderDataItem = CS.RenderDataItem();
	renderDataItem.renderItem = itemview:GetRoot().gameObject;
	renderDataItem.data = itemview;

	return renderDataItem;
end


function UIDailyQuestPanel.DailyItemRenderer(index,renderDataItem)
	self = UIDailyQuestPanel;
	local itemData = self.mDataList[index];
	local item = renderDataItem.data;
	item:SetData(itemData, self.mCurTaskTab.data);
	local itemBtn1 = UIUtils.GetButtonListener(item.mBtn_CompleteQuest.gameObject);
	itemBtn1.onClick = self.OnTakeQuestRewardClick;
	itemBtn1.param = itemData;
	local itemBtn2 = UIUtils.GetButtonListener(item.mBtn_UndoQuest_GotoQuest.gameObject);
	itemBtn2.onClick = self.OnGotoBtnClicked;
	itemBtn2.param = itemData;

	local fromScale = Vector3(1,0,1);
	local toScale   = Vector3(1,1,1);
	CS.UITweenManager.PlayScaleTween(item:GetRoot(),fromScale,toScale,0.3,0,nil,self.mTweenExpo);
end

function UIDailyQuestPanel.WeeklyItemProvider()
	self = UIDailyQuestPanel;
	local itemview = UIWeeklyQuestListItem.New();
	itemview:InitCtrl();
	local renderDataItem = CS.RenderDataItem();
	renderDataItem.renderItem = itemview:GetRoot().gameObject;
	renderDataItem.data = itemview;

	local fromScale = Vector3(1,0,1);
	local toScale   = Vector3(1,1,1);
	CS.UITweenManager.PlayScaleTween(itemview:GetRoot(),fromScale,toScale,0.3,0,nil,self.mTweenExpo);

	return renderDataItem;
end

function UIDailyQuestPanel.WeeklyItemRenderer(index,renderDataItem)
	self = UIDailyQuestPanel;

	local itemData = self.mDataList[index];
	local item = renderDataItem.data;
	item:SetData(itemData, self.mCurTaskTab.data);
	local itemBtn1 = UIUtils.GetButtonListener(item.mBtn_CompleteQuest.gameObject);
	itemBtn1.onClick = self.OnTakeQuestRewardClick;
	itemBtn1.param = itemData;
	local itemBtn2 = UIUtils.GetButtonListener(item.mBtn_UndoQuest_GotoQuest.gameObject);
	itemBtn2.onClick = self.OnGotoBtnClicked;
	itemBtn2.param = itemData;
end



function UIDailyQuestPanel.UpdateTabRedPoint( )
	self=UIDailyQuestPanel;
	for _, item in ipairs(self.mTaskTypeList) do
		if item then
			item:UpdateRedPoint()
		end
	end
end

--刷新 日常任务列表
function UIDailyQuestPanel.UpdateQuestView()
	self=UIDailyQuestPanel;
	self.RedPointType = {RedPointConst.Daily}
	self:UpdateRedPoint();
	self:UpdateTabRedPoint();
	if self.mCurTaskTab.data.type == 1 then
		self:UpdateDailyTaskList()
	elseif self.mCurTaskTab.data.type == 3 then
		self:UpdateNewbieTaskList();
	end
end

function UIDailyQuestPanel.UpdateQuestRewardDialog()
	self=UIDailyQuestPanel;

	local rewardList = TableData.listDailyRewardDatas:GetList();
	local getPoint = 0;
	self.mDataList = NetCmdQuestData:GetQuestListDatasByType(1)
	for i = 0, self.mDataList.Count - 1 do
		local data = self.mDataList[i]
		for itemId, num in pairs(data.rewardList) do
			if data.isReceived == true then
				getPoint = getPoint + num;
			end
		end
	end

	if self.mUIDailyRewardItem ~=nil then
		self.mUIDailyRewardItem:SetData(rewardList,getPoint);
	end
end

function UIDailyQuestPanel:UpdateDailyTaskList()

	self.mView.mAnimator:SetInteger("Switch", 0)
	
	local fade = self.mView.mVLayout_DailyQuestPanel_QuestList:GetComponent("MonoScrollerFadeManager")
	fade:InitFade();
	
	local rewardList = TableData.listDailyRewardDatas:GetList();
	local getPoint = 0;
	local totalPoint =  TableData.listDailyRewardDatas:GetDataById(rewardList.Count).Value;
	self.mDailyRewardList = {};
	local dailyRewards = NetCmdQuestData:GetDailyRewards();
	
	clearallchild(self.mView.mHLayout_DailyQuestPanel_RewardLayout.transform);


	self.mDataList = NetCmdQuestData:GetQuestListDatasByType(1)
	for _, item in ipairs(self.mDailyTaskList) do
		if item then
			item:SetData(nil)
		end
	end

	for i = 0, self.mDataList.Count - 1 do
		local data = self.mDataList[i]
		local item = nil
		if #self.mDailyTaskList < i + 1 then
			item = UIDailyQuestListItem.New();
			item:InitCtrl();
			UIUtils.AddListItem(item:GetRoot().transform, self.mView.mVLayout_DailyQuestPanel_QuestList.transform)
			table.insert(self.mDailyTaskList, item)
		else
			item = self.mDailyTaskList[i + 1]
		end
		
		local itemBtn2 = UIUtils.GetButtonListener(item.mBtn_UndoQuest_GotoQuest.gameObject);
		itemBtn2.onClick = self.OnGotoBtnClicked;
		itemBtn2.param = data;
		item:SetData(data, self.mCurTaskTab.data)
		for itemId, num in pairs(data.rewardList) do
			if data.isReceived == true then
				getPoint = getPoint + num;
			end
		end


	end
	CS.UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(UIDailyQuestPanel.mView.mHLayout_DailyQuestPanel_RewardLayout.transform.parent.parent);

	for i, v in pairs(rewardList) do
		local rewardItem = v;
		local prefab = UIUtils.GetGizmosPrefab(UIDailyQuestPanel.mPath_UIDailyRewardItem,self);
		if prefab then
			local gObj = instantiate(prefab)
			local taskTab = UIDailyRewardItem.New()
			taskTab:InitCtrl(gObj.transform)
			UIUtils.AddListItem(gObj, self.mView.mHLayout_DailyQuestPanel_RewardLayout.transform)
			local x = self.mView.mHLayout_DailyQuestPanel_RewardLayout.transform.rect.width/2
			local y = self.mView.mHLayout_DailyQuestPanel_RewardLayout.transform.rect.height/2
			local curPosX = self.mView.mHLayout_DailyQuestPanel_RewardLayout.transform.rect.width * rewardItem.Value / 100;
			gObj.transform.localPosition = CS.UnityEngine.Vector3(curPosX - x, y+19, 0)
			taskTab:SetData(rewardItem);

			table.insert(self.mDailyRewardList,taskTab);

			UIUtils.GetButtonListener(taskTab.mBtn_OpenDetail.gameObject).onClick = function(gObj)
				if getPoint >= rewardItem.Value then
					local canGet = true
					for key, value in pairs(dailyRewards) do
						if key == rewardItem.Id and value then
							canGet = false
						end
					end
					if canGet then
						UIDailyQuestPanel.OnQuestTakeDailyReward()
						return
					end
				end
				if self.mUIDailyRewardItem ==nil then
					self.mUIDailyRewardItem = UIQuestRewardDialog.New();
					obj=self.mUIDailyRewardItem:InitCtrl(self.mView.mTrans_CommonNode.transform);
					self.mUIDailyRewardItem:SetData(rewardList,getPoint);
				else
					self.mUIDailyRewardItem:SetData(rewardList,getPoint);
				end
				UIDailyQuestPanel:OpenUIDailyRewardItem()

				
			end

			setactive(taskTab.mTrans_UnfinishedBox.gameObject, true);
			if getPoint >=rewardItem.Value then
				setactive(taskTab.mTrans_UnfinishedBox.gameObject, false);
				setactive(taskTab.mTrans_FinishedBox.gameObject, true);
			end
			for key, value in pairs(dailyRewards) do
				if key == rewardItem.Id and value == true then
					setactive(taskTab.mTrans_ReceivedBox.gameObject, true);
					setactive(taskTab.mTrans_UnfinishedBox.gameObject, false);
					setactive(taskTab.mTrans_FinishedBox.gameObject, false);
				end
			end
		end
	end


	
	
	--判断是否可以领取
	self.mIsCanGetDailyRewardId = 0;
	
	local finishedNum = 0;
	for i, v in pairs(rewardList) do
		if getPoint >= v.Value then
			self.mIsCanGetDailyRewardId = v.Id;
			for key, value in pairs(dailyRewards) do
				if key == v.Id and value == true then
					finishedNum = finishedNum+1;
					self.mIsCanGetDailyRewardId = 0;
				end
				 
			end
		end
	end
	
	 
	self.mIsFinishDailyReward = finishedNum == rewardList.Count  and true or  false;
	if  self.mIsFinishDailyReward == true then
		self.mView:SetFinished();
	elseif  self.mIsCanGetDailyRewardId ~= 0 then
		self.mView:SetCanGetReward();
	else
		self.mView:SetNotCanGetReward();
	end

	self.mView.mText_DailyQuestPanel_PointDetail.text = getPoint;
	self.mView.mText_DailyQuestPanel_PointDetailAll.text = "/"..totalPoint;
	
	self.mView.mDailyScrollBar.fillAmount = getPoint/totalPoint;
	--顶栏 奖励
	
	UIUtils.GetButtonListener(self.mView.mBtn_DailyQuestPanel_ReceiveAll.gameObject).onClick = self.OnQuestTakeDailyReward;
end

function UIDailyQuestPanel:OpenUIDailyRewardItem()

end

function UIDailyQuestPanel:UpdateNewbieTaskList()

	self.mView.mAnimator:SetInteger("Switch", 1)
	self:UpdateNewbieTab();

	if(self.mCurSelectNewbiePharseData == nil) then
		return
	end

	local questList = NetCmdQuestData:GetGuideQuestListDatasByPhase(self.mCurSelectNewbiePharseData.id)

	for _, item in ipairs(self.mNewbieQuestItemList) do
		if item then
			item:SetData(nil)
		end
	end

	if questList == nil then
		return ;
	end

	for i = 0, questList.Count - 1 do
		local data = questList[i]
		local item = nil
		if #self.mNewbieQuestItemList < i + 1 then
			item = UIRookieQuestItem.New();
			item:InitCtrl();
			UIUtils.AddListItem(item:GetRoot().transform, self.mView.mTrans_NewbieTaskItemList.transform)
			table.insert(self.mNewbieQuestItemList, item)
		else
			item = self.mNewbieQuestItemList[i + 1]
		end

		UIUtils.GetButtonListener(item.mBtn_Receive.gameObject).onClick = function()
			self.mUICommonReceiveItemData = data;
			NetCmdQuestData:SendGuideQuestTakeReward({data.Id},UIDailyQuestPanel.OnGuideQuestRewardCallback);
		end

		item:SetData(data, i+1)
	end

	local totalNum = questList.Count
	local finishedNum = 0;
	for i = 0, questList.Count - 1 do
		if(questList[i].isReceived) then
		    finishedNum = finishedNum +1
		end
	end
	
	self.mView.mImage_NewbieProgress.fillAmount = finishedNum / totalNum;
	self.mView.mText_NewbieProgressNum.text = finishedNum
	self.mView.mText_NewbieProgressNumAll.text = "/" .. totalNum

	if(finishedNum >= totalNum) then
        setactive(self.mView.mTrans_NewbieReceive,true)
		setactive(self.mView.mTrans_NewbieUnCompleted,false)
	else
        setactive(self.mView.mTrans_NewbieReceive,false)
		setactive(self.mView.mTrans_NewbieUnCompleted,true)
	end

	if(NetCmdQuestData:CheckNewbiePhaseIsReceived(self.mCurSelectNewbiePharseData.id)) then
		local curAnim = self.mView.mTrans_Fin:GetComponent("Animation");
		curAnim:Play();
        setactive(self.mView.mTrans_Fin,true)
		setactive(self.mView.mTrans_Cant,false)
	else

		local curAnim = self.mView.mTrans_Cant:GetComponent("Animation");
		curAnim:Play();
        setactive(self.mView.mTrans_Fin,false)
		setactive(self.mView.mTrans_Cant,true)
	end


	
--[[
	local itemTable = {
		{self.mView.mTrans_RewardItem1,self.mView.mImg_RewardItemRank1,self.mView.mImg_RewardItemIcon1,self.mView.mText_RewardItemNum1,self.mView.mBtn_RewardItem1},
		{self.mView.mTrans_RewardItem2,self.mView.mImg_RewardItemRank2,self.mView.mImg_RewardItemIcon2,self.mView.mText_RewardItemNum2,self.mView.mBtn_RewardItem2},
		{self.mView.mTrans_RewardItem3,self.mView.mImg_RewardItemRank3,self.mView.mImg_RewardItemIcon3,self.mView.mText_RewardItemNum3,self.mView.mBtn_RewardItem3}
	}
]]

	local i = 1;

    setactive(self.mView.mTrans_RewardItem1,false);
	setactive(self.mView.mTrans_RewardItem2,false);
	setactive(self.mView.mTrans_RewardItem3,false);

	for k, v in pairs(self.mCurSelectNewbiePharseData.RewardList) do
		--local item = itemTable[i]
		--setactive(item[1],true)
		
		local stcData = TableData.GetItemData(k)
		if stcData == nil then
			gferror("itemID : " .. k .. "的配置为空请检查")
			return
		end

		local itemView = UICommonItem.New();
		if (i == 1) then
			setactive(self.mView.mTrans_RewardItem1.transform, true)
			itemView:InitCtrl(self.mView.mTrans_RewardItem1.transform)
		elseif (i == 2) then
			setactive(self.mView.mTrans_RewardItem2.transform, true)
			itemView:InitCtrl(self.mView.mTrans_RewardItem2.transform)
		else
			setactive(self.mView.mTrans_RewardItem3.transform, true)
			itemView:InitCtrl(self.mView.mTrans_RewardItem3.transform)
		end

		itemView:SetItemData(stcData.id, v)

		--[[		item[2].sprite =  IconUtils.GetQuiltyByRank(stcData.rank)
                item[3].sprite =  IconUtils.GetItemIconSprite(k)
                item[4].text = v
        
                TipsManager.Add(item[5].gameObject, stcData)]]

		i = i + 1;
	end            

	UIUtils.GetButtonListener(self.mView.mBtn_NewbieReceive.gameObject).onClick = self.OnQuestTakeNewbieReward;
end

function UIDailyQuestPanel.OnQuestTakeNewbieReward()
	self = UIDailyQuestPanel;
	self.mUICommonReceiveItemData = self.mCurSelectNewbiePharseData;
	NetCmdQuestData:SendGuideQuestTakePhaseReward(self.mCurSelectNewbiePharseData.id,self.OnGuideQuestRewardCallback)
end

function UIDailyQuestPanel.OnGuideQuestRewardCallback()
    self = UIDailyQuestPanel;
	self.TakeQuestRewardCallBack();
end


function UIDailyQuestPanel:UpdateWeeklyTaskList()
	self.mDataList = NetCmdQuestData:GetQuesRtListDatasByType(2)
	for _, item in ipairs(self.mNewbieQuestItemList) do
		if item then
			item:SetData(nil)
		end
	end

	if self.mDataList == nil then
		return ;
	end

	for i = 0, self.mDataList.Count - 1 do
		local data = self.mDataList[i]
		local item = nil
		if #self.mNewbieQuestItemList < i + 1 then
			item = UIWeeklyQuestListItem.New();
			item:InitCtrl();
			UIUtils.AddListItem(item:GetRoot().transform, self.mView.mTrans_WeeklyQuestListPanel_QuestList.transform)
			table.insert(self.mNewbieQuestItemList, item)
		else
			item = self.mNewbieQuestItemList[i + 1]
		end
		local itemBtn1 = UIUtils.GetButtonListener(item.mBtn_CompleteQuest.gameObject);
		itemBtn1.onClick = self.OnTakeQuestRewardClick;
		itemBtn1.param = data;
		local itemBtn2 = UIUtils.GetButtonListener(item.mBtn_UndoQuest_GotoQuest.gameObject);
		itemBtn2.onClick = self.OnGotoBtnClicked;
		itemBtn2.param = data;
		item:SetData(data, self.mCurTaskTab.data)
	end
end

--顶栏上领取

function UIDailyQuestPanel.OnQuestTakeDailyReward()
	self = UIDailyQuestPanel;
	if  self.mIsFinishDailyReward == true then
		return;
	end
	if self.mIsCanGetDailyRewardId == 0 then
		CS.PopupMessageManager.PopupString("无可领取奖励")
		return;
	end
	NetCmdQuestData:C2SQuestTakeDailyReward(self.mIsCanGetDailyRewardId)
end


--领取任务奖励
function UIDailyQuestPanel.OnTakeQuestRewardClick(gameObject)
	gfdebug("OnTakeQuestRewardClick")
	self=UIDailyQuestPanel;
	local itemBtn = UIUtils.GetButtonListener(gameObject);

	self.mUICommonReceiveItemData = itemBtn.param;
	NetCmdQuestData:Sendtake_quest_rewardCmd({itemBtn.param.Id},self.TakeQuestRewardCallBack);
end

--自动领取任务
function UIDailyQuestPanel.OnAutoTakeQuestRewardClick(param)
	gfdebug("OnTakeQuestRewardClick")
	self=UIDailyQuestPanel;

	--self.mUICommonReceiveItemData = param;

	NetCmdQuestData:Sendtake_quest_rewardCmd(param,self.TakeQuestRewardCallBack);

end

function  UIDailyQuestPanel.OnGotoBtnClicked(gameObject)
	self = UIDailyQuestPanel
	local itemBtn = UIUtils.GetButtonListener(gameObject)
	local dailyData = itemBtn.param
	--print(dailyData.SwitchType)
	if dailyData.link=='' then
		CS.PopupMessageManager.PopupString("  dailyData.link 为空 ");
		return;
	end
	local paramArray = string.split(dailyData.link, ',')
	SceneSwitch:SwitchByID(tonumber(paramArray[1]), {tonumber(paramArray[2])})
end

function UIDailyQuestPanel.TakeQuestRewardCallBack(data)
	self=UIDailyQuestPanel;

	if AccountNetCmdHandler.IsLevelUpdate==true then
		UICommonLevelUpPanel.Open(UICommonLevelUpPanel.ShowType.Settlement, function()
			UIManager.OpenUIByParam(UIDef.UICommonReceivePanel)

			-- UIDailyQuestPanel.UpdateQuestView();
			-- UIDailyQuestPanel.UpdateTabRedPoint()
		end)
	end

	UIDailyQuestPanel.UpdateQuestView();
	UIDailyQuestPanel.UpdateTabRedPoint()
	if self.showGet then
		UIManager.OpenUIByParam(UIDef.UICommonReceivePanel)
	else
		self.showGet = true
	end
	--self:UpdateNewbieTaskList();
end

function UIDailyQuestPanel.CloseTakeQuestRewardCallBack(data)
	self=UIDailyQuestPanel;
	self.UpdateQuestView();

	if self.mUICommonReceiveItem~=nil then
		self.mUICommonReceiveItem:SetData(nil);
	end
end


function UIDailyQuestPanel:SetWeeklyRewardDetail(index,rewardData,isCur)

	local datas = rewardData.mRewardItemlist;
	local state = NetCmdQuestData:CheckCanGetWeeklyRewardByID(rewardData.id);

	if state >= 1 then
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][1],true);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][2],false);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][3],false);
	else
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][1],false);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][2],false);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][3],true);
	end

	if(isCur) then
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][1],false);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][2],true);
		setactive(self.mView.mTransWeeklyRewardDetailList[index+1][3],false);
	end

	if(self.mIsRewardListLoaded == true) then
		return;
	end

	local prefab =  UIUtils.GetGizmosPrefab(self.mPath_UICommonItemS,self);
	for i = 0, datas.Count-1 do
		local instObj = instantiate(prefab);
		local itemview=UICommonItemS.New();
		itemview:InitCtrl(instObj.transform);
		itemview:SetData(datas[i].itemid,datas[i].num);
		UIUtils.AddListItem(instObj,self.mView.mTransWeeklyRewardDetailList[index+1][4])
	end
end

function UIDailyQuestPanel.OnChapterRewardCloseClick(gameObject)
	self=UIDailyQuestPanel;
	setactive(self.mView.mBtn_GetRewardDetail,false);
end

function UIDailyQuestPanel:OnWeeklyRewardClicked(index)
	printstack(index)
	self.mUICommonReceiveItemData = TableData.listWeeklyRewardDatas:GetDataById(index)
	local canGet = NetCmdQuestData:CheckCanGetReward(index ,self.TakeQuestRewardCallBack)
	if canGet==false then
		setactive(self.mView.mBtn_GetRewardDetail,true);
		local rewardList = TableData.GetWeeklyRewardList(index);

		local curFlag = false;
		for i = 0, rewardList.Count-1 do
			local data = rewardList[i];
			local state = NetCmdQuestData:CheckCanGetWeeklyRewardByID(data.id);
			if(state == 1 and curFlag == false) then
				curFlag = true;
				self:SetWeeklyRewardDetail(i,data,true);
			else
				self:SetWeeklyRewardDetail(i,data,false);
			end
		end

		self.mIsRewardListLoaded = true;
	end
end

function UIDailyQuestPanel.OnExitClicked(gameobj)
	self = UIDailyQuestPanel;
	UIDailyQuestPanel.Close();
end


