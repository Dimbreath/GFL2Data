---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.EnemyInfoPanel.UIEnemyInfoPanelView");

UIEnemyInfoPanel = class("UIEnemyInfoPanel", UIBasePanel);
UIEnemyInfoPanel.__index = UIEnemyInfoPanel;

UIEnemyInfoPanel.mView = nil;
UIEnemyInfoPanel.mGunData=nil;
UIEnemyInfoPanel.mUIBuffItemList=nil;
UIEnemyInfoPanel.mUISkillItemList=nil;


UIEnemyInfoPanel.mEnemyData=nil;
UIEnemyInfoPanel.stageclass=0;

function UIEnemyInfoPanel:ctor()
    UIEnemyInfoPanel.super.ctor(self);
end

function UIEnemyInfoPanel.Open(currentGun, selectedCount)
    print("UIEnemyInfoPanel  = " ..selectedCount)
    self = UIEnemyInfoPanel;
end

function UIEnemyInfoPanel.Close()
    UIManager.CloseUI(UIDef.UIEnemyInfoPanel);
end

function UIEnemyInfoPanel.Hide()
    self = UIEnemyInfoPanel;
    self:Show(false);
end

function UIEnemyInfoPanel.Init(root, data)
    UIEnemyInfoPanel.super.SetRoot(UIEnemyInfoPanel, root);
    UIEnemyInfoPanel.mData = data;

    UIEnemyInfoPanel.mView = UIEnemyInfoPanelView;
    UIEnemyInfoPanel.mView:InitCtrl(root);


    UIEnemyInfoPanel.mUIBuffItemList=List:New();
    UIEnemyInfoPanel.mUISkillItemList=List:New();

    if data ~=nil then
        gfdebug("data"..data);
        UIEnemyInfoPanel.mGunData = SceneObjManager:GetEnemyByID(data);
        UIEnemyInfoPanel.mEnemyData=UIEnemyInfoPanel.mGunData.EnemyDataInfo;
    end

end


function UIEnemyInfoPanel.OnInit()
    self = UIEnemyInfoPanel;
    UIUtils.GetButtonListener(self.mView.mBtn_ExitMask.gameObject).onClick = self.OnExitClicked;
    --UIUtils.GetButtonListener(self.mView.mBtn_AVGTest.gameObject).onClick = self.OnAVGTestClicked;

    --CS.GF2.Message.MessageSys.Instance:AddListener(1005,self.ConverSationMessage);
    --CS.GF2.Message.MessageSys.Instance:AddListener(1006,self.ConverSationEndMessage);

    --gfdebug("OnInit");

    self:UpdateView(nil);
end

function UIEnemyInfoPanel.OnShow()
    self = UIEnemyInfoPanel;
end

function UIEnemyInfoPanel.OnRelease()

    self = UIEnemyInfoPanel;

    --CS.GF2.Message.MessageSys.Instance:RemoveListener(1005,self.ConverSationMessage);
    --CS.GF2.Message.MessageSys.Instance:RemoveListener(1006,self.ConverSationEndMessage);
end

function UIEnemyInfoPanel.UpdateView(msg)
    self = UIEnemyInfoPanel;


    --敌方角色信息
    --local temData=TableData.GetRoleTemplateData(self.mEnemyData.role_template_id);
    --local mainPartData=TableData.GetRolePartData(temData.main_part);
    --local normalSkillData=TableData.GetSkillData(mainPartData.normal_attack);
	local normalSkillData =TableData.GetSkillData(self.mEnemyData.skill_normal_attack) 
    --local propertyData=TableData.GetRolePropertyData(mainPartData.property_id);

    --local levelPropertyData = TableData.GetLevelPropertyData(propertyData.data_start_id + self.stageclass +self.mEnemyData.add_level);
	local levelPropertyData = TableData.GetLevelPropertyDataByGroupAndLevel(self.mEnemyData.property_group,self.stageclass+self.mEnemyData.add_level);
	


    self.mView.mText_BasicInfo_Name.text=self.mEnemyData.name;
    self.mView.mText_BasicInfo_Level.text=self.stageclass+self.mEnemyData.add_level;
    self.mView.mText_BasicInfo_AttackRange.text=normalSkillData.min_range.."-"..normalSkillData.range;
    self.mView.mText_BasicInfo_AP.text=math.ceil(levelPropertyData.max_ap*(1+levelPropertyData.max_ap/1000));
    self.mView.mImage_BasicInfo_HeadPic.sprite=CS.IconUtils.GetCharacterHeadSprite(self.mEnemyData.character_pic);


    --Buff

    for i = 1, self.mUIBuffItemList:Count() do
        self.mUIBuffItemList[i]:SetData(nil);
    end

    if self.mGunData ~=nil then
        local buffDic=self.mGunData.BuffCtrl:GetBuffs():GetEnumerator() ;

        local index=0;
        while buffDic:MoveNext() do
            index =index+1;
            local value=buffDic.Current.Value;
            if index< self.mUIBuffItemList:Count()+1 then
                self.mUIBuffItemList[index+1]:SetData(value);
            else
                local itemview=UIBuffItem.New();
                itemview:InitCtrl(self.mView.mTrans_BuffList_BuffItemLayout);
                self.mUIBuffItemList:Add(itemview);
                itemview:SetData(value);
                local itemBtn1 = UIUtils.GetButtonListener(itemview.mUIRoot.gameObject);
                itemBtn1.onClick = self.OnBuffItemClick;
                itemBtn1.param = itemview;
                itemBtn1.paramData =value;
            end
        end
    end


    --Skill
    local datas=temData.skill_show_Array;
    for i = 1, self.mUISkillItemList:Count() do
        self.mUISkillItemList[i]:SetData(nil);
    end
    for i = 0, datas.Count-1 do
        local skilldata=TableData.GetSkillData(datas[i]);
        if i< self.mUISkillItemList:Count() then
            self.mUISkillItemList[i+1]:SetData(skilldata);
            local itemBtn1 = UIUtils.GetButtonListener(self.mUIRoot.gameObject);
            itemBtn1.paramData = skilldata;
        else
            local itemview=UISkillItem.New();
            itemview:InitCtrl(self.mView.mTrans_SkillList_SKillItemLayout);
            self.mUISkillItemList:Add(itemview);
            itemview:SetData(skilldata);
            local itemBtn1 = UIUtils.GetButtonListener(itemview.mUIRoot.gameObject);
            itemBtn1.onClick = self.OnSkillItemClick;
            itemBtn1.param = itemview;
            itemBtn1.paramData = skilldata;
        end
    end

end


function UIEnemyInfoPanel.ConverSationMessage(msg)
    self = UIEnemyInfoPanel;
    setactive(self.mView.mTrans_Conversation,true);
    --gfdebug(msg.Content);
    self.mView.mText_ConversationText.text=msg.Content;
end

function UIEnemyInfoPanel.ConverSationEndMessage(msg)
    self = UIEnemyInfoPanel;
    setactive(self.mView.mTrans_Conversation,false);
    --gfdebug(msg.Content);

end



function UIEnemyInfoPanel.OnBuffItemClick(gameObject)
    self=UIEnemyInfoPanel;

    setactive(self.mView.mTrans_BuffDetailPanel,true);
    setactive(self.mView.mTrans_SkillDetailPanel,false);

    for i = 1, self.mUIBuffItemList:Count() do
        self.mUIBuffItemList[i]:SetSelected(false);
    end

    for i = 1, self.mUISkillItemList:Count() do
        self.mUISkillItemList[i]:SetSelected(false);
    end


    local itemBtn1 = UIUtils.GetButtonListener(gameObject);
    itemBtn1.param:SetSelected(true);

    self.mView.mText_BuffDetailPanel_Name.text = itemBtn1.paramData.BuffData.name;
    self.mView.mText_BuffDetailPanel_Description.text = itemBtn1.paramData.BuffData.description;
    self.mView.mText_BuffDetailPanel_Tier.text = itemBtn1.paramData.BuffTier;



end


function UIEnemyInfoPanel.OnSkillItemClick(gameObject)
    self=UIEnemyInfoPanel;
    setactive(self.mView.mTrans_BuffDetailPanel,false);
    setactive(self.mView.mTrans_SkillDetailPanel,true);

    for i = 1, self.mUIBuffItemList:Count() do
        self.mUIBuffItemList[i]:SetSelected(false);
    end

    for i = 1, self.mUISkillItemList:Count() do
        self.mUISkillItemList[i]:SetSelected(false);
    end


    local itemBtn1 = UIUtils.GetButtonListener(gameObject);
    itemBtn1.param:SetSelected(true);

    self.mView.mText_SkillDetailPanel_Name.text = itemBtn1.paramData.name;


    local hintdata=TableData.GetHintDataById(itemBtn1.paramData.skill_type+5000);

    if hintdata~=nil then
        self.mView.mText_SkillDetailPanel_Type.text = hintdata.chars;
    end

    self.mView.mText_SkillDetailPanel_Level.text = itemBtn1.paramData.level;
    self.mView.mText_SkillDetailPanel_Description.text = itemBtn1.paramData.description;
    self.mView.mText_SkillDetailPanel_Range.text =itemBtn1.paramData.min_range.."-"..itemBtn1.paramData.range;
    self.mView.mText_SkillDetailPanel_Colddown.text =itemBtn1.paramData.cd_time;

	if(itemBtn1.paramData.shape_param[0]==0) then
		self.mText_SkillDetailPanel_ShapeRange.text = TableData.GetHintById(5100);
	else
		self.mText_SkillDetailPanel_ShapeRange.text = itemBtn1.paramData.shape_param[0].."-"..itemBtn1.paramData.shape_param[1];
	end
	self.mImage_SkillDetailPanel_Shape.sprite = UIUtils.GetIconSprite("Icon/SkillCreationShape",itemBtn1.paramData.shape)
	
    --[[local creation=TableData.GetCreationData(itemBtn1.paramData.creation_id);
    if creation ~=nil then
        self.mView.mText_SkillDetailPanel_ShapeRange.text=creation.shape_para;
        gfdebug(creation.shape);
        self.mView.mImage_SkillDetailPanel_Shape.sprite = CS.IconUtils.GetIconSprite(13,  tostring(creation.shape));
    else
        gfdebug("缺少creation ID："..itemBtn1.paramData.creation_id);
    end]]



    if itemBtn1.paramData.show_basic_info==1 then
        setactive(self.mView.mTrans_SkillDetailPanel_BasicInfo,true);
    else
        setactive(self.mView.mTrans_SkillDetailPanel_BasicInfo,false);
    end


end



function UIEnemyInfoPanel.OnExitClicked(gameobj)

    if SceneObjManager.curMainRole ~= nil then
        SceneObjManager.curMainRole.FindPath();
    end
    UIEnemyInfoPanel.Close();
end


