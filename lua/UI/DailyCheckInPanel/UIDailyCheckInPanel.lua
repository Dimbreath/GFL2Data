---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 18/11/7 20:31
---

require("UI.UIBasePanel")
require("UI.DailyCheckInPanel.UIDailyCheckInPanelView")
require("UI.DailyCheckInPanel.Item.UICheckInItem")

UIDailyCheckInPanel = class("UIDailyCheckInPanel", UIBasePanel)
UIDailyCheckInPanel.__index = UIDailyCheckInPanel

UIDailyCheckInPanel.mView = nil
UIDailyCheckInPanel.mData = nil
UIDailyCheckInPanel.mCurCheckInDays = 0
UIDailyCheckInPanel.mCurCheckInId = 0
UIDailyCheckInPanel.mCheckInItemList = nil
UIDailyCheckInPanel.mCurCheckInItem = nil

UIDailyCheckInPanel.callback = nil
UIDailyCheckInPanel.IsPlayed = false

UIDailyCheckInPanel.mTimer = nil;
UIDailyCheckInPanel.CanClose = true;

function UIDailyCheckInPanel:ctor()
    UIDailyCheckInPanel.super.ctor(self)
end

function UIDailyCheckInPanel.Open()
    self = UIDailyCheckInPanel
end

function UIDailyCheckInPanel.Close()
    UIManager.CloseUI(UIDef.UIDailyCheckInPanel)
end

function UIDailyCheckInPanel.Hide()
    self = UIDailyCheckInPanel
    self:Show(false)
end

function UIDailyCheckInPanel.Init(root, callback)
    self = UIDailyCheckInPanel

    -- gfdebug("PauseGuide")
    -- GuideManager:PauseGuide()
    
    self.callback = callback
    self.mIsPop = true

    self:SetRoot(root)
end


function UIDailyCheckInPanel.OnInit()
    self = UIDailyCheckInPanel

    UIDailyCheckInPanel.IsPlayed = false
    UIDailyCheckInPanel.CanClose = true;
    
    self.mView = UIDailyCheckInPanelView
    self.mView:InitCtrl(self.mUIRoot)

    self.mCheckInItemList = List:New()

    UIUtils.GetButtonListener(self.mView.mBtn_DailyCheckIn_Confirm.gameObject).onClick = self.OnReturnClicked
    UIUtils.GetButtonListener(self.mView.mBtn_DailyCheckInClose.gameObject).onClick = self.OnReturnClicked
    
    
    self:InitCheckInData()

    
end

function UIDailyCheckInPanel.OnShow()
   
    self = UIDailyCheckInPanel
    
end

function UIDailyCheckInPanel:InitCheckInData()
    self.mData = NetCmdCheckInData.CheckInData
    self.mCurCheckInDays = self.mData.CheckinDay + 1
    self.mCurCheckInId = self.mData.CheckinId

    setactive(self.mView.mBtn_DailyCheckIn_Confirm.gameObject,false)

    local data = NetCmdCheckInData:GetCheckInDataListById(self.mCurCheckInId)
    for i = 0, data.Count - 1 do
        local item = UICheckInItem.New()
        item:InitCtrl(self.mView.mLayout_DailyCheckIn_CheckInItemList.transform)
        item:InitData(data[i])

        if(data[i].Day < self.mCurCheckInDays) then
            item:SetMask()
        end

        if(data[i].Day == self.mCurCheckInDays - 1) then
            item:SetTransparent()
        end

        self.mCheckInItemList:Add(item)
    end

    if(self.mData.IsChecked == false) then
        UIDailyCheckInPanel.CanClose = false;
        TimerSys:DelayCall(2.01, self.DelayCheckIn, nil)
    else
        setactive(self.mView.mBtn_DailyCheckIn_Confirm.gameObject,true)
        UIDailyCheckInPanel.IsPlayed = true
        UIDailyCheckInPanel.CanClose = true;
    end

    
    UIDailyCheckInPanel.mTimer = TimerSys:DelayCall(0.5, function ()
        self.mView.mScrollView:ScrollToCell(self.mCurCheckInDays, 1500)
    end , nil)

end

function UIDailyCheckInPanel.DelayCheckIn()
    self = UIDailyCheckInPanel
    for i = 1,  #self.mCheckInItemList do
        local item = self.mCheckInItemList[i]
        if(item.mData.Day == self.mCurCheckInDays) then
            self.mCurCheckInItem = item
            break
        end
    end

    NetCmdCheckInData:SendDailyCheckInCmd(self.mCurCheckInDays-1,self.CheckInCallback)
end


function UIDailyCheckInPanel.CheckInCallback(ret)
    self = UIDailyCheckInPanel

    UIDailyCheckInPanel.CanClose = false;

    if ret == CS.CMDRet.eSuccess then
        gfdebug("签到成功")
        self.mCurCheckInItem:SetChecked(function ()

            TimerSys:DelayCall(1.0, function ()
                NetCmdCheckInData:ShowCheckInReward()
            end , nil)

            TimerSys:DelayCall(1.5, function ()
                UIDailyCheckInPanel.CanClose = true;
            end , nil)

            --NetCmdCheckInData:ShowCheckInReward()
            UIDailyCheckInPanel.IsPlayed =  true
        end)
        --self.mView.mText_DailyCheckIn_CheckinCountBGImage_CheckinCount_CheckinCountNow.text = self.mData.CheckinDay
    else
		gfdebug("签到失败")
    end

    setactive(self.mView.mBtn_DailyCheckIn_Confirm.gameObject,true)
end

function UIDailyCheckInPanel.OnReturnClicked(gameObject)
    if not UIDailyCheckInPanel.IsPlayed then
        return
    end

    if(not UIDailyCheckInPanel.CanClose) then
        return
    end

    self = UIDailyCheckInPanel

    -- if(CS.GuideManager.Instance.IsTutorialOn == true and not CS.NetCmdTimerData.Instance.m_IsNextDay) then
    --     NetCmdTutorialData:SendTutorialInfo(UICommandCenterPanel.OnTutorialInfoCallback)
    -- end
    if self.callback then self.callback() end
    UIDailyCheckInPanel.Close()
end

function UIDailyCheckInPanel.OnRelease()
    self = UIDailyCheckInPanel
    if(UIDailyCheckInPanel.mTimer ~= nil) then
        UIDailyCheckInPanel.mTimer:Stop();
        UIDailyCheckInPanel.mTimer = nil;
    end
    UIDailyCheckInPanel.IsPlayed = false
end
