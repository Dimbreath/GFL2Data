---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 6.
--- DateTime: 18/9/9 23:15
---
require("UI.UIBaseCtrl")

UICharacterItem = class("UICharacterItem", UIBaseCtrl);
UICharacterItem.__index = UICharacterItem;

UICharacterItem.mButton_Gun = nil;

UICharacterItem.mText_Power = nil;
UICharacterItem.mText_Level = nil;
UICharacterItem.mText_Name = nil;
UICharacterItem.mText_Grade = nil;
UICharacterItem.mText_Team = nil;

UICharacterItem.mImage_Team = nil;
UICharacterItem.mImage_Gun = nil;
UICharacterItem.mImage_FatiguePer = nil;
UICharacterItem.mImage_Battery = nil;
UICharacterItem.mImage_HeavyDam = nil;
UICharacterItem.mImage_GunType = nil;
UICharacterItem.mImage_GunStar = nil;
UICharacterItem.mImage_Selected = nil;

UICharacterItem.GunInfo = nil;

UICharacterItem.mSelectType = gfenum({"Selected", "UnSelected", "Unusefull"},-1);

UICharacterItem.mObj_Selected = nil;
UICharacterItem.mObj_UnavailableMask = nil;

function UICharacterItem:ctor()
    UICharacterItem.super.ctor(self);
end

function UICharacterItem:InitCtrl(root)

    self:SetRoot(root);

    self.mButton_Gun = self:GetSelfButton();

    self.mText_Power = self:GetText("Power/PowerNumber");
    self.mText_Level = self:GetText("ButtonBar/Level/LvNum");
    self.mText_Name = self:GetText("ButtonBar/Name/Text");
    self.mText_Grade = self:GetText("ButtonBar/Grade/Text");
    self.mText_Team = self:GetText("CurrentTeam/TeamNum");

    self.mImage_Team = self:GetImage("CurrentTeam");

    self.mImage_Gun = self:GetImage("avator/image");
    self.mImage_FatiguePer = self:GetImage("ButtonBar/Fatigue/FatiguePercent");
    self.mImage_Battery = self:GetImage("ButtonBar/Fatigue/FatigueBattery");
    self.mImage_HeavyDam = self:GetImage("HeavyDamage");
    self.mImage_GunType = self:GetImage("Guntype");
    self.mImage_GunStar = self:GetImage("GunRate/star");

    self.mImage_Selected =self:GetImage("Selected");

    self.mObj_Selected = self:FindChild("Selected");
    self.mObj_UnavailableMask = self:FindChild("UnavailableMask");

end

function UICharacterItem:SetData(gun)
    if gun == nil then
        return;
    end

    self.GunInfo = gun;

    local gundata = TableData.GetGunData(gun.stc_gun_id);
    --local defineGund = TableData.GetDefineGunData(gundata.typeInt);

    self.mImage_Gun.sprite = IconUtils.GetCharacterHeadSprite(gundata.code);
    self.mImage_GunStar.sprite = UIUtils.GetGunMessageSprite("GunStar_"..gundata.rank);

    --Power
    self.mText_Power.text = gun.Power;
    --枪的种类
    self.mImage_GunType.sprite = UIUtils.GetGunMessageSprite("Combat_GunTypeIcon_"..tostring(gundata.typeInt));
    self.mText_Name.text = gundata.name;

    --fatigue 疲劳度
    local fatiguePec = gun.wear_Pct;
    self.mImage_FatiguePer.fillAmount = fatiguePec;
    local batterySpritename = TableData.GetGlobalGunFatigueBatterySpriteNameByPec(fatiguePec)

    local hpPec = gun.hp / gun.max_hp;
    --print("per : " ..fatiguePec .. "  def ："..batterySpritename)
    if hpPec <= TableDataMgr.HeavyDamageFloat then
        setactive(self.mImage_HeavyDam.gameObject, true);
    else
        setactive(self.mImage_HeavyDam.gameObject, false);
    end

    self.mImage_Battery.sprite = UIUtils.GetGunMessageSprite(batterySpritename);

    self.mImage_FatiguePer.color = TableData.GetGlobalGunFatigueBatteryColorByPec(fatiguePec)
    self.mImage_Battery.color = TableData.GetGlobalGunFatigueBatteryColorByPec(fatiguePec)

    self.mText_Level.text = gun.level;

    if gun.team_id == 0 then
        setactive(self.mImage_Team.gameObject, false);
    else
        setactive(self.mImage_Team.gameObject, true);
        self.mText_Team.text = gun.team_id;
    end
end

function UICharacterItem:SetActive(enable)
    setactive(self:GetRoot(), enable);
end


function UICharacterItem:DestroySelf()
    gfdestroy(self:GetRoot());
end


--选择的状态  不可选  未选中  选中
function UICharacterItem:SelectState(state)
    if state==UICharacterItem.mSelectType.Selected then
        setactive(self.mObj_Selected, true);
        setactive(self.mObj_UnavailableMask, false);
    elseif state==UICharacterItem.mSelectType.UnSelected then
        setactive(self.mObj_Selected, false);
        setactive(self.mObj_UnavailableMask, false);
    elseif state==UICharacterItem.mSelectType.Unusefull then
        setactive(self.mObj_Selected, false);
        setactive(self.mObj_UnavailableMask, true);
    end
end
